//go:build exclude_duplicates

//**************************************************************
//Protobuf Message SpeedSetPlus proto file
//- command/response definition
//-
//-in SDK Init
//#define NED_CATEGORY 	"speedsetPlusGen2"
//#define NED_MODEL_ID 	"speedsetPlus-gen2"
//#define NED_MODEL_NAME 	"TBD"    	//sku
//-
//**************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: speedsetplus.proto

package ned

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpeedsetPlusErrorCode int32

const (
	SpeedsetPlusErrorCode_UNKNOWN_ERROR                          SpeedsetPlusErrorCode = 0
	SpeedsetPlusErrorCode_SPEEDSET_PLUS_ERROR_SW_IPM_OVERCURRENT SpeedsetPlusErrorCode = 1
	SpeedsetPlusErrorCode_SPEEDSET_PLUS_ERROR_DC_OVERVOLTAGE     SpeedsetPlusErrorCode = 2
	SpeedsetPlusErrorCode_SPEEDSET_PLUS_ERROR_DC_UNDERVOLTAGE    SpeedsetPlusErrorCode = 3 //more to be defined as needed
)

// Enum value maps for SpeedsetPlusErrorCode.
var (
	SpeedsetPlusErrorCode_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "SPEEDSET_PLUS_ERROR_SW_IPM_OVERCURRENT",
		2: "SPEEDSET_PLUS_ERROR_DC_OVERVOLTAGE",
		3: "SPEEDSET_PLUS_ERROR_DC_UNDERVOLTAGE",
	}
	SpeedsetPlusErrorCode_value = map[string]int32{
		"UNKNOWN_ERROR":                          0,
		"SPEEDSET_PLUS_ERROR_SW_IPM_OVERCURRENT": 1,
		"SPEEDSET_PLUS_ERROR_DC_OVERVOLTAGE":     2,
		"SPEEDSET_PLUS_ERROR_DC_UNDERVOLTAGE":    3,
	}
)

func (x SpeedsetPlusErrorCode) Enum() *SpeedsetPlusErrorCode {
	p := new(SpeedsetPlusErrorCode)
	*p = x
	return p
}

func (x SpeedsetPlusErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedsetPlusErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_speedsetplus_proto_enumTypes[0].Descriptor()
}

func (SpeedsetPlusErrorCode) Type() protoreflect.EnumType {
	return &file_speedsetplus_proto_enumTypes[0]
}

func (x SpeedsetPlusErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedsetPlusErrorCode.Descriptor instead.
func (SpeedsetPlusErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{0}
}

// ***********************************************************
// ** SpeedSetPlus Messages ***
// **********************************************************
type SpeedsetPlusRequestPayloads struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*SpeedsetPlusRequestPayloads_SetVspControlCommand
	//	*SpeedsetPlusRequestPayloads_GetDeviceInformation
	//	*SpeedsetPlusRequestPayloads_GetStatus
	//	*SpeedsetPlusRequestPayloads_GetConfiguration
	//	*SpeedsetPlusRequestPayloads_SetConfiguration
	//	*SpeedsetPlusRequestPayloads_GetActiveErrors
	RequestType   isSpeedsetPlusRequestPayloads_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedsetPlusRequestPayloads) Reset() {
	*x = SpeedsetPlusRequestPayloads{}
	mi := &file_speedsetplus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedsetPlusRequestPayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedsetPlusRequestPayloads) ProtoMessage() {}

func (x *SpeedsetPlusRequestPayloads) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedsetPlusRequestPayloads.ProtoReflect.Descriptor instead.
func (*SpeedsetPlusRequestPayloads) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{0}
}

func (x *SpeedsetPlusRequestPayloads) GetRequestType() isSpeedsetPlusRequestPayloads_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *SpeedsetPlusRequestPayloads) GetSetVspControlCommand() *SetSpeedsetPlusControlCommandRequestPayload {
	if x != nil {
		if x, ok := x.RequestType.(*SpeedsetPlusRequestPayloads_SetVspControlCommand); ok {
			return x.SetVspControlCommand
		}
	}
	return nil
}

func (x *SpeedsetPlusRequestPayloads) GetGetDeviceInformation() *GetSpeedsetPlusDeviceInformationRequestPayload {
	if x != nil {
		if x, ok := x.RequestType.(*SpeedsetPlusRequestPayloads_GetDeviceInformation); ok {
			return x.GetDeviceInformation
		}
	}
	return nil
}

func (x *SpeedsetPlusRequestPayloads) GetGetStatus() *GetSpeedsetPlusStatusRequestPayload {
	if x != nil {
		if x, ok := x.RequestType.(*SpeedsetPlusRequestPayloads_GetStatus); ok {
			return x.GetStatus
		}
	}
	return nil
}

func (x *SpeedsetPlusRequestPayloads) GetGetConfiguration() *GetSpeedsetPlusConfigurationRequestPayload {
	if x != nil {
		if x, ok := x.RequestType.(*SpeedsetPlusRequestPayloads_GetConfiguration); ok {
			return x.GetConfiguration
		}
	}
	return nil
}

func (x *SpeedsetPlusRequestPayloads) GetSetConfiguration() *SetSpeedsetPlusConfigurationRequestPayload {
	if x != nil {
		if x, ok := x.RequestType.(*SpeedsetPlusRequestPayloads_SetConfiguration); ok {
			return x.SetConfiguration
		}
	}
	return nil
}

func (x *SpeedsetPlusRequestPayloads) GetGetActiveErrors() *GetSpeedsetPlusActiveErrorsRequestPayload {
	if x != nil {
		if x, ok := x.RequestType.(*SpeedsetPlusRequestPayloads_GetActiveErrors); ok {
			return x.GetActiveErrors
		}
	}
	return nil
}

type isSpeedsetPlusRequestPayloads_RequestType interface {
	isSpeedsetPlusRequestPayloads_RequestType()
}

type SpeedsetPlusRequestPayloads_SetVspControlCommand struct {
	SetVspControlCommand *SetSpeedsetPlusControlCommandRequestPayload `protobuf:"bytes,1,opt,name=set_vsp_control_command,json=setVspControlCommand,proto3,oneof"`
}

type SpeedsetPlusRequestPayloads_GetDeviceInformation struct {
	GetDeviceInformation *GetSpeedsetPlusDeviceInformationRequestPayload `protobuf:"bytes,2,opt,name=get_device_information,json=getDeviceInformation,proto3,oneof"`
}

type SpeedsetPlusRequestPayloads_GetStatus struct {
	GetStatus *GetSpeedsetPlusStatusRequestPayload `protobuf:"bytes,3,opt,name=get_status,json=getStatus,proto3,oneof"`
}

type SpeedsetPlusRequestPayloads_GetConfiguration struct {
	GetConfiguration *GetSpeedsetPlusConfigurationRequestPayload `protobuf:"bytes,4,opt,name=get_configuration,json=getConfiguration,proto3,oneof"`
}

type SpeedsetPlusRequestPayloads_SetConfiguration struct {
	SetConfiguration *SetSpeedsetPlusConfigurationRequestPayload `protobuf:"bytes,5,opt,name=set_configuration,json=setConfiguration,proto3,oneof"`
}

type SpeedsetPlusRequestPayloads_GetActiveErrors struct {
	GetActiveErrors *GetSpeedsetPlusActiveErrorsRequestPayload `protobuf:"bytes,7,opt,name=get_active_errors,json=getActiveErrors,proto3,oneof"`
}

func (*SpeedsetPlusRequestPayloads_SetVspControlCommand) isSpeedsetPlusRequestPayloads_RequestType() {
}

func (*SpeedsetPlusRequestPayloads_GetDeviceInformation) isSpeedsetPlusRequestPayloads_RequestType() {
}

func (*SpeedsetPlusRequestPayloads_GetStatus) isSpeedsetPlusRequestPayloads_RequestType() {}

func (*SpeedsetPlusRequestPayloads_GetConfiguration) isSpeedsetPlusRequestPayloads_RequestType() {}

func (*SpeedsetPlusRequestPayloads_SetConfiguration) isSpeedsetPlusRequestPayloads_RequestType() {}

func (*SpeedsetPlusRequestPayloads_GetActiveErrors) isSpeedsetPlusRequestPayloads_RequestType() {}

type SpeedsetPlusResponsePayloads struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ResponseType:
	//
	//	*SpeedsetPlusResponsePayloads_GetDeviceInformation
	//	*SpeedsetPlusResponsePayloads_GetStatus
	//	*SpeedsetPlusResponsePayloads_GetConfiguration
	//	*SpeedsetPlusResponsePayloads_GetActiveErrors
	ResponseType  isSpeedsetPlusResponsePayloads_ResponseType `protobuf_oneof:"response_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedsetPlusResponsePayloads) Reset() {
	*x = SpeedsetPlusResponsePayloads{}
	mi := &file_speedsetplus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedsetPlusResponsePayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedsetPlusResponsePayloads) ProtoMessage() {}

func (x *SpeedsetPlusResponsePayloads) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedsetPlusResponsePayloads.ProtoReflect.Descriptor instead.
func (*SpeedsetPlusResponsePayloads) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{1}
}

func (x *SpeedsetPlusResponsePayloads) GetResponseType() isSpeedsetPlusResponsePayloads_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *SpeedsetPlusResponsePayloads) GetGetDeviceInformation() *GetSpeedsetPlusDeviceInformationResponsePayload {
	if x != nil {
		if x, ok := x.ResponseType.(*SpeedsetPlusResponsePayloads_GetDeviceInformation); ok {
			return x.GetDeviceInformation
		}
	}
	return nil
}

func (x *SpeedsetPlusResponsePayloads) GetGetStatus() *GetSpeedsetPlusStatusResponsePayload {
	if x != nil {
		if x, ok := x.ResponseType.(*SpeedsetPlusResponsePayloads_GetStatus); ok {
			return x.GetStatus
		}
	}
	return nil
}

func (x *SpeedsetPlusResponsePayloads) GetGetConfiguration() *GetSpeedsetPlusConfigurationResponsePayload {
	if x != nil {
		if x, ok := x.ResponseType.(*SpeedsetPlusResponsePayloads_GetConfiguration); ok {
			return x.GetConfiguration
		}
	}
	return nil
}

func (x *SpeedsetPlusResponsePayloads) GetGetActiveErrors() *GetSpeedsetPlusActiveErrorsResponsePayload {
	if x != nil {
		if x, ok := x.ResponseType.(*SpeedsetPlusResponsePayloads_GetActiveErrors); ok {
			return x.GetActiveErrors
		}
	}
	return nil
}

type isSpeedsetPlusResponsePayloads_ResponseType interface {
	isSpeedsetPlusResponsePayloads_ResponseType()
}

type SpeedsetPlusResponsePayloads_GetDeviceInformation struct {
	GetDeviceInformation *GetSpeedsetPlusDeviceInformationResponsePayload `protobuf:"bytes,1,opt,name=get_device_information,json=getDeviceInformation,proto3,oneof"`
}

type SpeedsetPlusResponsePayloads_GetStatus struct {
	GetStatus *GetSpeedsetPlusStatusResponsePayload `protobuf:"bytes,2,opt,name=get_status,json=getStatus,proto3,oneof"`
}

type SpeedsetPlusResponsePayloads_GetConfiguration struct {
	GetConfiguration *GetSpeedsetPlusConfigurationResponsePayload `protobuf:"bytes,3,opt,name=get_configuration,json=getConfiguration,proto3,oneof"`
}

type SpeedsetPlusResponsePayloads_GetActiveErrors struct {
	GetActiveErrors *GetSpeedsetPlusActiveErrorsResponsePayload `protobuf:"bytes,4,opt,name=get_active_errors,json=getActiveErrors,proto3,oneof"`
}

func (*SpeedsetPlusResponsePayloads_GetDeviceInformation) isSpeedsetPlusResponsePayloads_ResponseType() {
}

func (*SpeedsetPlusResponsePayloads_GetStatus) isSpeedsetPlusResponsePayloads_ResponseType() {}

func (*SpeedsetPlusResponsePayloads_GetConfiguration) isSpeedsetPlusResponsePayloads_ResponseType() {}

func (*SpeedsetPlusResponsePayloads_GetActiveErrors) isSpeedsetPlusResponsePayloads_ResponseType() {}

type SpeedsetPlusInfoPayloads struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AnnounceType:
	//
	//	*SpeedsetPlusInfoPayloads_Status
	//	*SpeedsetPlusInfoPayloads_Configuration
	AnnounceType  isSpeedsetPlusInfoPayloads_AnnounceType `protobuf_oneof:"announce_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedsetPlusInfoPayloads) Reset() {
	*x = SpeedsetPlusInfoPayloads{}
	mi := &file_speedsetplus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedsetPlusInfoPayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedsetPlusInfoPayloads) ProtoMessage() {}

func (x *SpeedsetPlusInfoPayloads) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedsetPlusInfoPayloads.ProtoReflect.Descriptor instead.
func (*SpeedsetPlusInfoPayloads) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{2}
}

func (x *SpeedsetPlusInfoPayloads) GetAnnounceType() isSpeedsetPlusInfoPayloads_AnnounceType {
	if x != nil {
		return x.AnnounceType
	}
	return nil
}

func (x *SpeedsetPlusInfoPayloads) GetStatus() *SpeedsetPlusStatus {
	if x != nil {
		if x, ok := x.AnnounceType.(*SpeedsetPlusInfoPayloads_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *SpeedsetPlusInfoPayloads) GetConfiguration() *SpeedsetPlusConfiguration {
	if x != nil {
		if x, ok := x.AnnounceType.(*SpeedsetPlusInfoPayloads_Configuration); ok {
			return x.Configuration
		}
	}
	return nil
}

type isSpeedsetPlusInfoPayloads_AnnounceType interface {
	isSpeedsetPlusInfoPayloads_AnnounceType()
}

type SpeedsetPlusInfoPayloads_Status struct {
	Status *SpeedsetPlusStatus `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type SpeedsetPlusInfoPayloads_Configuration struct {
	Configuration *SpeedsetPlusConfiguration `protobuf:"bytes,2,opt,name=configuration,proto3,oneof"`
}

func (*SpeedsetPlusInfoPayloads_Status) isSpeedsetPlusInfoPayloads_AnnounceType() {}

func (*SpeedsetPlusInfoPayloads_Configuration) isSpeedsetPlusInfoPayloads_AnnounceType() {}

// a command wrapper message with a type field
// MQTT topic: 'cmd/<category>/<serial number>/req'

func (x *CommandRequestMessage) Reset() {
	*x = CommandRequestMessage{}
	mi := &file_speedsetplus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequestMessage) ProtoMessage() {}

func (x *CommandRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequestMessage.ProtoReflect.Descriptor instead.
func (*CommandRequestMessage) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{3}
}

func (x *CommandRequestMessage) GetCommandUuid() string {
	if x != nil {
		return x.CommandUuid
	}
	return ""
}

func (x *CommandRequestMessage) GetPayload() isCommandRequestMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CommandRequestMessage) GetCommon() *CommonRequestPayloads {
	if x != nil {
		if x, ok := x.Payload.(*CommandRequestMessage_Common); ok {
			return x.Common
		}
	}
	return nil
}

func (x *CommandRequestMessage) GetSpeedsetplus() *SpeedsetPlusRequestPayloads {
	if x != nil {
		if x, ok := x.Payload.(*CommandRequestMessage_Speedsetplus); ok {
			return x.Speedsetplus
		}
	}
	return nil
}

type isCommandRequestMessage_Payload interface {
	isCommandRequestMessage_Payload()
}

type CommandRequestMessage_Common struct {
	Common *CommonRequestPayloads `protobuf:"bytes,2,opt,name=common,proto3,oneof"`
}

type CommandRequestMessage_Speedsetplus struct {
	Speedsetplus *SpeedsetPlusRequestPayloads `protobuf:"bytes,3,opt,name=speedsetplus,proto3,oneof"`
}

func (*CommandRequestMessage_Common) isCommandRequestMessage_Payload() {}

func (*CommandRequestMessage_Speedsetplus) isCommandRequestMessage_Payload() {}

// a response wrapper message with a message type field
// and the required response code
// MQTT topic: 'cmd/<category>/<serial number>/res'

func (x *CommandResponseMessage) Reset() {
	*x = CommandResponseMessage{}
	mi := &file_speedsetplus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponseMessage) ProtoMessage() {}

func (x *CommandResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponseMessage.ProtoReflect.Descriptor instead.
func (*CommandResponseMessage) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{4}
}

func (x *CommandResponseMessage) GetCommandUuid() string {
	if x != nil {
		return x.CommandUuid
	}
	return ""
}

func (x *CommandResponseMessage) GetResponseCode() ResponseCode {
	if x != nil {
		return x.ResponseCode
	}
	return ResponseCode_RESPONSE_UNKNOWN
}

func (x *CommandResponseMessage) GetPayload() isCommandResponseMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CommandResponseMessage) GetCommon() *CommonResponsePayloads {
	if x != nil {
		if x, ok := x.Payload.(*CommandResponseMessage_Common); ok {
			return x.Common
		}
	}
	return nil
}

func (x *CommandResponseMessage) GetSpeedsetplus() *SpeedsetPlusResponsePayloads {
	if x != nil {
		if x, ok := x.Payload.(*CommandResponseMessage_Speedsetplus); ok {
			return x.Speedsetplus
		}
	}
	return nil
}

type isCommandResponseMessage_Payload interface {
	isCommandResponseMessage_Payload()
}

type CommandResponseMessage_Common struct {
	Common *CommonResponsePayloads `protobuf:"bytes,3,opt,name=common,proto3,oneof"`
}

type CommandResponseMessage_Speedsetplus struct {
	Speedsetplus *SpeedsetPlusResponsePayloads `protobuf:"bytes,4,opt,name=speedsetplus,proto3,oneof"`
}

func (*CommandResponseMessage_Common) isCommandResponseMessage_Payload() {}

func (*CommandResponseMessage_Speedsetplus) isCommandResponseMessage_Payload() {}

// an Info message wrapper
// MQTT  topic: 'async/<category>/<serial number>/info'
// Info messages can be a variety of message types
type InfoMessage struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Payload       *SpeedsetPlusInfoPayloads `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoMessage) Reset() {
	*x = InfoMessage{}
	mi := &file_speedsetplus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoMessage) ProtoMessage() {}

func (x *InfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoMessage.ProtoReflect.Descriptor instead.
func (*InfoMessage) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{5}
}

func (x *InfoMessage) GetPayload() *SpeedsetPlusInfoPayloads {
	if x != nil {
		return x.Payload
	}
	return nil
}

// a Telemetry message wrapper
// MQTT topic: 'async/<category>/<serial number>/dt'
// Telemetry messages do not need a message 'type'
type TelemetryMessage struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rssi               int32                  `protobuf:"varint,1,opt,name=rssi,proto3" json:"rssi,omitempty"`
	MotorRpm           int32                  `protobuf:"varint,2,opt,name=motor_rpm,json=motorRpm,proto3" json:"motor_rpm,omitempty"`                                 // Current RPM of the motor
	MotorCurrent       int32                  `protobuf:"varint,4,opt,name=motor_current,json=motorCurrent,proto3" json:"motor_current,omitempty"`                     // Current motor current in rms A
	DemandRpm          int32                  `protobuf:"varint,3,opt,name=demand_rpm,json=demandRpm,proto3" json:"demand_rpm,omitempty"`                              // RPM set by the user
	Torque             int32                  `protobuf:"varint,5,opt,name=torque,proto3" json:"torque,omitempty"`                                                     // Current torque in Nm
	InverterInputPower int32                  `protobuf:"varint,6,opt,name=inverter_input_power,json=inverterInputPower,proto3" json:"inverter_input_power,omitempty"` // Inverter input power in W
	DcBusVoltage       int32                  `protobuf:"varint,7,opt,name=dc_bus_voltage,json=dcBusVoltage,proto3" json:"dc_bus_voltage,omitempty"`                   // DC bus voltage in V
	AmbientTemperature int32                  `protobuf:"varint,8,opt,name=ambient_temperature,json=ambientTemperature,proto3" json:"ambient_temperature,omitempty"`   // Ambient temperature in deci-degree Celsius (0.1 Celsius)
	OutputPower        int32                  `protobuf:"varint,9,opt,name=output_power,json=outputPower,proto3" json:"output_power,omitempty"`                        // Inverter output power in W
	MotorLineVoltage   int32                  `protobuf:"varint,10,opt,name=motor_line_voltage,json=motorLineVoltage,proto3" json:"motor_line_voltage,omitempty"`      // Motor line voltage in V
	MotorInputPower    int32                  `protobuf:"varint,11,opt,name=motor_input_power,json=motorInputPower,proto3" json:"motor_input_power,omitempty"`         // Motor input power in W
	IpmTemperature     int32                  `protobuf:"varint,12,opt,name=ipm_temperature,json=ipmTemperature,proto3" json:"ipm_temperature,omitempty"`              // IPM temperature in deci-degree Celsius (0.1 Celsius)
	TotalFaults        int32                  `protobuf:"varint,13,opt,name=total_faults,json=totalFaults,proto3" json:"total_faults,omitempty"`                       // Total number of faults encountered
	Humidity           int32                  `protobuf:"varint,14,opt,name=humidity,proto3" json:"humidity,omitempty"`                                                // Humidity in percentage (0 - 100) - optional
	VibrationX         int32                  `protobuf:"varint,15,opt,name=vibration_x,json=vibrationX,proto3" json:"vibration_x,omitempty"`                          // Vibration in X direction in mg - optional
	VibrationY         int32                  `protobuf:"varint,16,opt,name=vibration_y,json=vibrationY,proto3" json:"vibration_y,omitempty"`                          // Vibration in Y direction in mg - optional
	VibrationZ         int32                  `protobuf:"varint,17,opt,name=vibration_z,json=vibrationZ,proto3" json:"vibration_z,omitempty"`                          // Vibration in Z direction in mg - optional
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TelemetryMessage) Reset() {
	*x = TelemetryMessage{}
	mi := &file_speedsetplus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryMessage) ProtoMessage() {}

func (x *TelemetryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryMessage.ProtoReflect.Descriptor instead.
func (*TelemetryMessage) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{6}
}

func (x *TelemetryMessage) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *TelemetryMessage) GetMotorRpm() int32 {
	if x != nil {
		return x.MotorRpm
	}
	return 0
}

func (x *TelemetryMessage) GetMotorCurrent() int32 {
	if x != nil {
		return x.MotorCurrent
	}
	return 0
}

func (x *TelemetryMessage) GetDemandRpm() int32 {
	if x != nil {
		return x.DemandRpm
	}
	return 0
}

func (x *TelemetryMessage) GetTorque() int32 {
	if x != nil {
		return x.Torque
	}
	return 0
}

func (x *TelemetryMessage) GetInverterInputPower() int32 {
	if x != nil {
		return x.InverterInputPower
	}
	return 0
}

func (x *TelemetryMessage) GetDcBusVoltage() int32 {
	if x != nil {
		return x.DcBusVoltage
	}
	return 0
}

func (x *TelemetryMessage) GetAmbientTemperature() int32 {
	if x != nil {
		return x.AmbientTemperature
	}
	return 0
}

func (x *TelemetryMessage) GetOutputPower() int32 {
	if x != nil {
		return x.OutputPower
	}
	return 0
}

func (x *TelemetryMessage) GetMotorLineVoltage() int32 {
	if x != nil {
		return x.MotorLineVoltage
	}
	return 0
}

func (x *TelemetryMessage) GetMotorInputPower() int32 {
	if x != nil {
		return x.MotorInputPower
	}
	return 0
}

func (x *TelemetryMessage) GetIpmTemperature() int32 {
	if x != nil {
		return x.IpmTemperature
	}
	return 0
}

func (x *TelemetryMessage) GetTotalFaults() int32 {
	if x != nil {
		return x.TotalFaults
	}
	return 0
}

func (x *TelemetryMessage) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *TelemetryMessage) GetVibrationX() int32 {
	if x != nil {
		return x.VibrationX
	}
	return 0
}

func (x *TelemetryMessage) GetVibrationY() int32 {
	if x != nil {
		return x.VibrationY
	}
	return 0
}

func (x *TelemetryMessage) GetVibrationZ() int32 {
	if x != nil {
		return x.VibrationZ
	}
	return 0
}

type SpeedsetPlusStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Power         int32                  `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`                          // Motor Control, 0 = off, 1 = on
	DemandRpm     int32                  `protobuf:"varint,2,opt,name=demand_rpm,json=demandRpm,proto3" json:"demand_rpm,omitempty"` // configured RPM
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedsetPlusStatus) Reset() {
	*x = SpeedsetPlusStatus{}
	mi := &file_speedsetplus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedsetPlusStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedsetPlusStatus) ProtoMessage() {}

func (x *SpeedsetPlusStatus) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedsetPlusStatus.ProtoReflect.Descriptor instead.
func (*SpeedsetPlusStatus) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{7}
}

func (x *SpeedsetPlusStatus) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *SpeedsetPlusStatus) GetDemandRpm() int32 {
	if x != nil {
		return x.DemandRpm
	}
	return 0
}

type SpeedsetPlusConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedsetPlusConfiguration) Reset() {
	*x = SpeedsetPlusConfiguration{}
	mi := &file_speedsetplus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedsetPlusConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedsetPlusConfiguration) ProtoMessage() {}

func (x *SpeedsetPlusConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedsetPlusConfiguration.ProtoReflect.Descriptor instead.
func (*SpeedsetPlusConfiguration) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{8}
}

// Command and Response
// MESSAGE_SET_SPEEDSET_PLUS_OUTPUT_CMD
type SetSpeedsetPlusControlCommandRequestPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Power         int32                  `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`                                     // Motor Control, 0 = off, 1 = on
	SetDemandRpm  int32                  `protobuf:"varint,2,opt,name=set_demand_rpm,json=setDemandRpm,proto3" json:"set_demand_rpm,omitempty"` // RPM
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSpeedsetPlusControlCommandRequestPayload) Reset() {
	*x = SetSpeedsetPlusControlCommandRequestPayload{}
	mi := &file_speedsetplus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSpeedsetPlusControlCommandRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSpeedsetPlusControlCommandRequestPayload) ProtoMessage() {}

func (x *SetSpeedsetPlusControlCommandRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSpeedsetPlusControlCommandRequestPayload.ProtoReflect.Descriptor instead.
func (*SetSpeedsetPlusControlCommandRequestPayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{9}
}

func (x *SetSpeedsetPlusControlCommandRequestPayload) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *SetSpeedsetPlusControlCommandRequestPayload) GetSetDemandRpm() int32 {
	if x != nil {
		return x.SetDemandRpm
	}
	return 0
}

// MESSAGE_GET_DEVICE_INFORMATION_RSP
type GetSpeedsetPlusDeviceInformationRequestPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusDeviceInformationRequestPayload) Reset() {
	*x = GetSpeedsetPlusDeviceInformationRequestPayload{}
	mi := &file_speedsetplus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusDeviceInformationRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusDeviceInformationRequestPayload) ProtoMessage() {}

func (x *GetSpeedsetPlusDeviceInformationRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusDeviceInformationRequestPayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusDeviceInformationRequestPayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{10}
}

type GetSpeedsetPlusDeviceInformationResponsePayload struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MotorSerialNumber    string                 `protobuf:"bytes,1,opt,name=motor_serial_number,json=motorSerialNumber,proto3" json:"motor_serial_number,omitempty"` // Serial number of the motor board
	MotorFirmwareVersion string                 `protobuf:"bytes,2,opt,name=motor_firmware_version,json=motorFirmwareVersion,proto3" json:"motor_firmware_version,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSpeedsetPlusDeviceInformationResponsePayload) Reset() {
	*x = GetSpeedsetPlusDeviceInformationResponsePayload{}
	mi := &file_speedsetplus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusDeviceInformationResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusDeviceInformationResponsePayload) ProtoMessage() {}

func (x *GetSpeedsetPlusDeviceInformationResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusDeviceInformationResponsePayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusDeviceInformationResponsePayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{11}
}

func (x *GetSpeedsetPlusDeviceInformationResponsePayload) GetMotorSerialNumber() string {
	if x != nil {
		return x.MotorSerialNumber
	}
	return ""
}

func (x *GetSpeedsetPlusDeviceInformationResponsePayload) GetMotorFirmwareVersion() string {
	if x != nil {
		return x.MotorFirmwareVersion
	}
	return ""
}

// MESSAGE_GET_STATUS_RSP
type GetSpeedsetPlusStatusRequestPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusStatusRequestPayload) Reset() {
	*x = GetSpeedsetPlusStatusRequestPayload{}
	mi := &file_speedsetplus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusStatusRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusStatusRequestPayload) ProtoMessage() {}

func (x *GetSpeedsetPlusStatusRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusStatusRequestPayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusStatusRequestPayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{12}
}

type GetSpeedsetPlusStatusResponsePayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *SpeedsetPlusStatus    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusStatusResponsePayload) Reset() {
	*x = GetSpeedsetPlusStatusResponsePayload{}
	mi := &file_speedsetplus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusStatusResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusStatusResponsePayload) ProtoMessage() {}

func (x *GetSpeedsetPlusStatusResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusStatusResponsePayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusStatusResponsePayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{13}
}

func (x *GetSpeedsetPlusStatusResponsePayload) GetStatus() *SpeedsetPlusStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Configuration
type GetSpeedsetPlusConfigurationRequestPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusConfigurationRequestPayload) Reset() {
	*x = GetSpeedsetPlusConfigurationRequestPayload{}
	mi := &file_speedsetplus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusConfigurationRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusConfigurationRequestPayload) ProtoMessage() {}

func (x *GetSpeedsetPlusConfigurationRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusConfigurationRequestPayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusConfigurationRequestPayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{14}
}

type GetSpeedsetPlusConfigurationResponsePayload struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Configuration *SpeedsetPlusConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusConfigurationResponsePayload) Reset() {
	*x = GetSpeedsetPlusConfigurationResponsePayload{}
	mi := &file_speedsetplus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusConfigurationResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusConfigurationResponsePayload) ProtoMessage() {}

func (x *GetSpeedsetPlusConfigurationResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusConfigurationResponsePayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusConfigurationResponsePayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{15}
}

func (x *GetSpeedsetPlusConfigurationResponsePayload) GetConfiguration() *SpeedsetPlusConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type SetSpeedsetPlusConfigurationRequestPayload struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Configuration *SpeedsetPlusConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSpeedsetPlusConfigurationRequestPayload) Reset() {
	*x = SetSpeedsetPlusConfigurationRequestPayload{}
	mi := &file_speedsetplus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSpeedsetPlusConfigurationRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSpeedsetPlusConfigurationRequestPayload) ProtoMessage() {}

func (x *SetSpeedsetPlusConfigurationRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSpeedsetPlusConfigurationRequestPayload.ProtoReflect.Descriptor instead.
func (*SetSpeedsetPlusConfigurationRequestPayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{16}
}

func (x *SetSpeedsetPlusConfigurationRequestPayload) GetConfiguration() *SpeedsetPlusConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type GetSpeedsetPlusActiveErrorsRequestPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusActiveErrorsRequestPayload) Reset() {
	*x = GetSpeedsetPlusActiveErrorsRequestPayload{}
	mi := &file_speedsetplus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusActiveErrorsRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusActiveErrorsRequestPayload) ProtoMessage() {}

func (x *GetSpeedsetPlusActiveErrorsRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusActiveErrorsRequestPayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusActiveErrorsRequestPayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{17}
}

type GetSpeedsetPlusActiveErrorsResponsePayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActiveErrors  *ActiveErrors          `protobuf:"bytes,1,opt,name=active_errors,json=activeErrors,proto3" json:"active_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpeedsetPlusActiveErrorsResponsePayload) Reset() {
	*x = GetSpeedsetPlusActiveErrorsResponsePayload{}
	mi := &file_speedsetplus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpeedsetPlusActiveErrorsResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeedsetPlusActiveErrorsResponsePayload) ProtoMessage() {}

func (x *GetSpeedsetPlusActiveErrorsResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeedsetPlusActiveErrorsResponsePayload.ProtoReflect.Descriptor instead.
func (*GetSpeedsetPlusActiveErrorsResponsePayload) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{18}
}

func (x *GetSpeedsetPlusActiveErrorsResponsePayload) GetActiveErrors() *ActiveErrors {
	if x != nil {
		return x.ActiveErrors
	}
	return nil
}

// a device Error message
// MQTT topic: 'async/<category>/<serial number>/error'
type DeviceErrorMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActiveErrors  *ActiveErrors          `protobuf:"bytes,1,opt,name=active_errors,json=activeErrors,proto3" json:"active_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceErrorMessage) Reset() {
	*x = DeviceErrorMessage{}
	mi := &file_speedsetplus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceErrorMessage) ProtoMessage() {}

func (x *DeviceErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceErrorMessage.ProtoReflect.Descriptor instead.
func (*DeviceErrorMessage) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceErrorMessage) GetActiveErrors() *ActiveErrors {
	if x != nil {
		return x.ActiveErrors
	}
	return nil
}

type SpeedsetPlusError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     SpeedsetPlusErrorCode  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=speedsetPlus.SpeedsetPlusErrorCode" json:"error_code,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Human readable error message, provided by the device
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedsetPlusError) Reset() {
	*x = SpeedsetPlusError{}
	mi := &file_speedsetplus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedsetPlusError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedsetPlusError) ProtoMessage() {}

func (x *SpeedsetPlusError) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedsetPlusError.ProtoReflect.Descriptor instead.
func (*SpeedsetPlusError) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{20}
}

func (x *SpeedsetPlusError) GetErrorCode() SpeedsetPlusErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return SpeedsetPlusErrorCode_UNKNOWN_ERROR
}

func (x *SpeedsetPlusError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ActiveErrors struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of active errors (empty if back to normal)
	ErrorList     []*SpeedsetPlusError `protobuf:"bytes,1,rep,name=error_list,json=errorList,proto3" json:"error_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActiveErrors) Reset() {
	*x = ActiveErrors{}
	mi := &file_speedsetplus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveErrors) ProtoMessage() {}

func (x *ActiveErrors) ProtoReflect() protoreflect.Message {
	mi := &file_speedsetplus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveErrors.ProtoReflect.Descriptor instead.
func (*ActiveErrors) Descriptor() ([]byte, []int) {
	return file_speedsetplus_proto_rawDescGZIP(), []int{21}
}

func (x *ActiveErrors) GetErrorList() []*SpeedsetPlusError {
	if x != nil {
		return x.ErrorList
	}
	return nil
}

var File_speedsetplus_proto protoreflect.FileDescriptor

const file_speedsetplus_proto_rawDesc = "" +
	"\n" +
	"\x12speedsetplus.proto\x12\fspeedsetPlus\x1a\x1acommonClientMessages.proto\"\xa4\x05\n" +
	"\x1bSpeedsetPlusRequestPayloads\x12r\n" +
	"\x17set_vsp_control_command\x18\x01 \x01(\v29.speedsetPlus.SetSpeedsetPlusControlCommandRequestPayloadH\x00R\x14setVspControlCommand\x12t\n" +
	"\x16get_device_information\x18\x02 \x01(\v2<.speedsetPlus.GetSpeedsetPlusDeviceInformationRequestPayloadH\x00R\x14getDeviceInformation\x12R\n" +
	"\n" +
	"get_status\x18\x03 \x01(\v21.speedsetPlus.GetSpeedsetPlusStatusRequestPayloadH\x00R\tgetStatus\x12g\n" +
	"\x11get_configuration\x18\x04 \x01(\v28.speedsetPlus.GetSpeedsetPlusConfigurationRequestPayloadH\x00R\x10getConfiguration\x12g\n" +
	"\x11set_configuration\x18\x05 \x01(\v28.speedsetPlus.SetSpeedsetPlusConfigurationRequestPayloadH\x00R\x10setConfiguration\x12e\n" +
	"\x11get_active_errors\x18\a \x01(\v27.speedsetPlus.GetSpeedsetPlusActiveErrorsRequestPayloadH\x00R\x0fgetActiveErrorsB\x0e\n" +
	"\frequest_type\"\xcd\x03\n" +
	"\x1cSpeedsetPlusResponsePayloads\x12u\n" +
	"\x16get_device_information\x18\x01 \x01(\v2=.speedsetPlus.GetSpeedsetPlusDeviceInformationResponsePayloadH\x00R\x14getDeviceInformation\x12S\n" +
	"\n" +
	"get_status\x18\x02 \x01(\v22.speedsetPlus.GetSpeedsetPlusStatusResponsePayloadH\x00R\tgetStatus\x12h\n" +
	"\x11get_configuration\x18\x03 \x01(\v29.speedsetPlus.GetSpeedsetPlusConfigurationResponsePayloadH\x00R\x10getConfiguration\x12f\n" +
	"\x11get_active_errors\x18\x04 \x01(\v28.speedsetPlus.GetSpeedsetPlusActiveErrorsResponsePayloadH\x00R\x0fgetActiveErrorsB\x0f\n" +
	"\rresponse_type\"\xb8\x01\n" +
	"\x18SpeedsetPlusInfoPayloads\x12:\n" +
	"\x06status\x18\x01 \x01(\v2 .speedsetPlus.SpeedsetPlusStatusH\x00R\x06status\x12O\n" +
	"\rconfiguration\x18\x02 \x01(\v2'.speedsetPlus.SpeedsetPlusConfigurationH\x00R\rconfigurationB\x0f\n" +
	"\rannounce_type\"\xcc\x01\n" +
	"\x15CommandRequestMessage\x12!\n" +
	"\fcommand_uuid\x18\x01 \x01(\tR\vcommandUuid\x124\n" +
	"\x06common\x18\x02 \x01(\v2\x1a.ned.CommonRequestPayloadsH\x00R\x06common\x12O\n" +
	"\fspeedsetplus\x18\x03 \x01(\v2).speedsetPlus.SpeedsetPlusRequestPayloadsH\x00R\fspeedsetplusB\t\n" +
	"\apayload\"\x87\x02\n" +
	"\x16CommandResponseMessage\x12!\n" +
	"\fcommand_uuid\x18\x01 \x01(\tR\vcommandUuid\x126\n" +
	"\rresponse_code\x18\x02 \x01(\x0e2\x11.ned.ResponseCodeR\fresponseCode\x125\n" +
	"\x06common\x18\x03 \x01(\v2\x1b.ned.CommonResponsePayloadsH\x00R\x06common\x12P\n" +
	"\fspeedsetplus\x18\x04 \x01(\v2*.speedsetPlus.SpeedsetPlusResponsePayloadsH\x00R\fspeedsetplusB\t\n" +
	"\apayload\"O\n" +
	"\vInfoMessage\x12@\n" +
	"\apayload\x18\x01 \x01(\v2&.speedsetPlus.SpeedsetPlusInfoPayloadsR\apayload\"\xf0\x04\n" +
	"\x10TelemetryMessage\x12\x12\n" +
	"\x04rssi\x18\x01 \x01(\x05R\x04rssi\x12\x1b\n" +
	"\tmotor_rpm\x18\x02 \x01(\x05R\bmotorRpm\x12#\n" +
	"\rmotor_current\x18\x04 \x01(\x05R\fmotorCurrent\x12\x1d\n" +
	"\n" +
	"demand_rpm\x18\x03 \x01(\x05R\tdemandRpm\x12\x16\n" +
	"\x06torque\x18\x05 \x01(\x05R\x06torque\x120\n" +
	"\x14inverter_input_power\x18\x06 \x01(\x05R\x12inverterInputPower\x12$\n" +
	"\x0edc_bus_voltage\x18\a \x01(\x05R\fdcBusVoltage\x12/\n" +
	"\x13ambient_temperature\x18\b \x01(\x05R\x12ambientTemperature\x12!\n" +
	"\foutput_power\x18\t \x01(\x05R\voutputPower\x12,\n" +
	"\x12motor_line_voltage\x18\n" +
	" \x01(\x05R\x10motorLineVoltage\x12*\n" +
	"\x11motor_input_power\x18\v \x01(\x05R\x0fmotorInputPower\x12'\n" +
	"\x0fipm_temperature\x18\f \x01(\x05R\x0eipmTemperature\x12!\n" +
	"\ftotal_faults\x18\r \x01(\x05R\vtotalFaults\x12\x1a\n" +
	"\bhumidity\x18\x0e \x01(\x05R\bhumidity\x12\x1f\n" +
	"\vvibration_x\x18\x0f \x01(\x05R\n" +
	"vibrationX\x12\x1f\n" +
	"\vvibration_y\x18\x10 \x01(\x05R\n" +
	"vibrationY\x12\x1f\n" +
	"\vvibration_z\x18\x11 \x01(\x05R\n" +
	"vibrationZ\"I\n" +
	"\x12SpeedsetPlusStatus\x12\x14\n" +
	"\x05power\x18\x01 \x01(\x05R\x05power\x12\x1d\n" +
	"\n" +
	"demand_rpm\x18\x02 \x01(\x05R\tdemandRpm\"\x1b\n" +
	"\x19SpeedsetPlusConfiguration\"i\n" +
	"+SetSpeedsetPlusControlCommandRequestPayload\x12\x14\n" +
	"\x05power\x18\x01 \x01(\x05R\x05power\x12$\n" +
	"\x0eset_demand_rpm\x18\x02 \x01(\x05R\fsetDemandRpm\"0\n" +
	".GetSpeedsetPlusDeviceInformationRequestPayload\"\x97\x01\n" +
	"/GetSpeedsetPlusDeviceInformationResponsePayload\x12.\n" +
	"\x13motor_serial_number\x18\x01 \x01(\tR\x11motorSerialNumber\x124\n" +
	"\x16motor_firmware_version\x18\x02 \x01(\tR\x14motorFirmwareVersion\"%\n" +
	"#GetSpeedsetPlusStatusRequestPayload\"`\n" +
	"$GetSpeedsetPlusStatusResponsePayload\x128\n" +
	"\x06status\x18\x01 \x01(\v2 .speedsetPlus.SpeedsetPlusStatusR\x06status\",\n" +
	"*GetSpeedsetPlusConfigurationRequestPayload\"|\n" +
	"+GetSpeedsetPlusConfigurationResponsePayload\x12M\n" +
	"\rconfiguration\x18\x01 \x01(\v2'.speedsetPlus.SpeedsetPlusConfigurationR\rconfiguration\"{\n" +
	"*SetSpeedsetPlusConfigurationRequestPayload\x12M\n" +
	"\rconfiguration\x18\x01 \x01(\v2'.speedsetPlus.SpeedsetPlusConfigurationR\rconfiguration\"+\n" +
	")GetSpeedsetPlusActiveErrorsRequestPayload\"m\n" +
	"*GetSpeedsetPlusActiveErrorsResponsePayload\x12?\n" +
	"\ractive_errors\x18\x01 \x01(\v2\x1a.speedsetPlus.ActiveErrorsR\factiveErrors\"U\n" +
	"\x12DeviceErrorMessage\x12?\n" +
	"\ractive_errors\x18\x01 \x01(\v2\x1a.speedsetPlus.ActiveErrorsR\factiveErrors\"|\n" +
	"\x11SpeedsetPlusError\x12B\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x0e2#.speedsetPlus.SpeedsetPlusErrorCodeR\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"N\n" +
	"\fActiveErrors\x12>\n" +
	"\n" +
	"error_list\x18\x01 \x03(\v2\x1f.speedsetPlus.SpeedsetPlusErrorR\terrorList*\xa7\x01\n" +
	"\x15SpeedsetPlusErrorCode\x12\x11\n" +
	"\rUNKNOWN_ERROR\x10\x00\x12*\n" +
	"&SPEEDSET_PLUS_ERROR_SW_IPM_OVERCURRENT\x10\x01\x12&\n" +
	"\"SPEEDSET_PLUS_ERROR_DC_OVERVOLTAGE\x10\x02\x12'\n" +
	"#SPEEDSET_PLUS_ERROR_DC_UNDERVOLTAGE\x10\x03B\x1aZ\x18pooltester3_20250916/nedb\x06proto3"

var (
	file_speedsetplus_proto_rawDescOnce sync.Once
	file_speedsetplus_proto_rawDescData []byte
)

func file_speedsetplus_proto_rawDescGZIP() []byte {
	file_speedsetplus_proto_rawDescOnce.Do(func() {
		file_speedsetplus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_speedsetplus_proto_rawDesc), len(file_speedsetplus_proto_rawDesc)))
	})
	return file_speedsetplus_proto_rawDescData
}

var file_speedsetplus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_speedsetplus_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_speedsetplus_proto_goTypes = []any{
	(SpeedsetPlusErrorCode)(0),                              // 0: speedsetPlus.SpeedsetPlusErrorCode
	(*SpeedsetPlusRequestPayloads)(nil),                     // 1: speedsetPlus.SpeedsetPlusRequestPayloads
	(*SpeedsetPlusResponsePayloads)(nil),                    // 2: speedsetPlus.SpeedsetPlusResponsePayloads
	(*SpeedsetPlusInfoPayloads)(nil),                        // 3: speedsetPlus.SpeedsetPlusInfoPayloads
	(*CommandRequestMessage)(nil),                           // 4: speedsetPlus.CommandRequestMessage
	(*CommandResponseMessage)(nil),                          // 5: speedsetPlus.CommandResponseMessage
	(*InfoMessage)(nil),                                     // 6: speedsetPlus.InfoMessage
	(*TelemetryMessage)(nil),                                // 7: speedsetPlus.TelemetryMessage
	(*SpeedsetPlusStatus)(nil),                              // 8: speedsetPlus.SpeedsetPlusStatus
	(*SpeedsetPlusConfiguration)(nil),                       // 9: speedsetPlus.SpeedsetPlusConfiguration
	(*SetSpeedsetPlusControlCommandRequestPayload)(nil),     // 10: speedsetPlus.SetSpeedsetPlusControlCommandRequestPayload
	(*GetSpeedsetPlusDeviceInformationRequestPayload)(nil),  // 11: speedsetPlus.GetSpeedsetPlusDeviceInformationRequestPayload
	(*GetSpeedsetPlusDeviceInformationResponsePayload)(nil), // 12: speedsetPlus.GetSpeedsetPlusDeviceInformationResponsePayload
	(*GetSpeedsetPlusStatusRequestPayload)(nil),             // 13: speedsetPlus.GetSpeedsetPlusStatusRequestPayload
	(*GetSpeedsetPlusStatusResponsePayload)(nil),            // 14: speedsetPlus.GetSpeedsetPlusStatusResponsePayload
	(*GetSpeedsetPlusConfigurationRequestPayload)(nil),      // 15: speedsetPlus.GetSpeedsetPlusConfigurationRequestPayload
	(*GetSpeedsetPlusConfigurationResponsePayload)(nil),     // 16: speedsetPlus.GetSpeedsetPlusConfigurationResponsePayload
	(*SetSpeedsetPlusConfigurationRequestPayload)(nil),      // 17: speedsetPlus.SetSpeedsetPlusConfigurationRequestPayload
	(*GetSpeedsetPlusActiveErrorsRequestPayload)(nil),       // 18: speedsetPlus.GetSpeedsetPlusActiveErrorsRequestPayload
	(*GetSpeedsetPlusActiveErrorsResponsePayload)(nil),      // 19: speedsetPlus.GetSpeedsetPlusActiveErrorsResponsePayload
	(*DeviceErrorMessage)(nil),                              // 20: speedsetPlus.DeviceErrorMessage
	(*SpeedsetPlusError)(nil),                               // 21: speedsetPlus.SpeedsetPlusError
	(*ActiveErrors)(nil),                                    // 22: speedsetPlus.ActiveErrors
	(*CommonRequestPayloads)(nil),                           // 23: ned.CommonRequestPayloads
	(ResponseCode)(0),                                       // 24: ned.ResponseCode
	(*CommonResponsePayloads)(nil),                          // 25: ned.CommonResponsePayloads
}
var file_speedsetplus_proto_depIdxs = []int32{
	10, // 0: speedsetPlus.SpeedsetPlusRequestPayloads.set_vsp_control_command:type_name -> speedsetPlus.SetSpeedsetPlusControlCommandRequestPayload
	11, // 1: speedsetPlus.SpeedsetPlusRequestPayloads.get_device_information:type_name -> speedsetPlus.GetSpeedsetPlusDeviceInformationRequestPayload
	13, // 2: speedsetPlus.SpeedsetPlusRequestPayloads.get_status:type_name -> speedsetPlus.GetSpeedsetPlusStatusRequestPayload
	15, // 3: speedsetPlus.SpeedsetPlusRequestPayloads.get_configuration:type_name -> speedsetPlus.GetSpeedsetPlusConfigurationRequestPayload
	17, // 4: speedsetPlus.SpeedsetPlusRequestPayloads.set_configuration:type_name -> speedsetPlus.SetSpeedsetPlusConfigurationRequestPayload
	18, // 5: speedsetPlus.SpeedsetPlusRequestPayloads.get_active_errors:type_name -> speedsetPlus.GetSpeedsetPlusActiveErrorsRequestPayload
	12, // 6: speedsetPlus.SpeedsetPlusResponsePayloads.get_device_information:type_name -> speedsetPlus.GetSpeedsetPlusDeviceInformationResponsePayload
	14, // 7: speedsetPlus.SpeedsetPlusResponsePayloads.get_status:type_name -> speedsetPlus.GetSpeedsetPlusStatusResponsePayload
	16, // 8: speedsetPlus.SpeedsetPlusResponsePayloads.get_configuration:type_name -> speedsetPlus.GetSpeedsetPlusConfigurationResponsePayload
	19, // 9: speedsetPlus.SpeedsetPlusResponsePayloads.get_active_errors:type_name -> speedsetPlus.GetSpeedsetPlusActiveErrorsResponsePayload
	8,  // 10: speedsetPlus.SpeedsetPlusInfoPayloads.status:type_name -> speedsetPlus.SpeedsetPlusStatus
	9,  // 11: speedsetPlus.SpeedsetPlusInfoPayloads.configuration:type_name -> speedsetPlus.SpeedsetPlusConfiguration
	23, // 12: speedsetPlus.CommandRequestMessage.common:type_name -> ned.CommonRequestPayloads
	1,  // 13: speedsetPlus.CommandRequestMessage.speedsetplus:type_name -> speedsetPlus.SpeedsetPlusRequestPayloads
	24, // 14: speedsetPlus.CommandResponseMessage.response_code:type_name -> ned.ResponseCode
	25, // 15: speedsetPlus.CommandResponseMessage.common:type_name -> ned.CommonResponsePayloads
	2,  // 16: speedsetPlus.CommandResponseMessage.speedsetplus:type_name -> speedsetPlus.SpeedsetPlusResponsePayloads
	3,  // 17: speedsetPlus.InfoMessage.payload:type_name -> speedsetPlus.SpeedsetPlusInfoPayloads
	8,  // 18: speedsetPlus.GetSpeedsetPlusStatusResponsePayload.status:type_name -> speedsetPlus.SpeedsetPlusStatus
	9,  // 19: speedsetPlus.GetSpeedsetPlusConfigurationResponsePayload.configuration:type_name -> speedsetPlus.SpeedsetPlusConfiguration
	9,  // 20: speedsetPlus.SetSpeedsetPlusConfigurationRequestPayload.configuration:type_name -> speedsetPlus.SpeedsetPlusConfiguration
	22, // 21: speedsetPlus.GetSpeedsetPlusActiveErrorsResponsePayload.active_errors:type_name -> speedsetPlus.ActiveErrors
	22, // 22: speedsetPlus.DeviceErrorMessage.active_errors:type_name -> speedsetPlus.ActiveErrors
	0,  // 23: speedsetPlus.SpeedsetPlusError.error_code:type_name -> speedsetPlus.SpeedsetPlusErrorCode
	21, // 24: speedsetPlus.ActiveErrors.error_list:type_name -> speedsetPlus.SpeedsetPlusError
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_speedsetplus_proto_init() }
func file_speedsetplus_proto_init() {
	if File_speedsetplus_proto != nil {
		return
	}
	file_commonClientMessages_proto_init()
	file_speedsetplus_proto_msgTypes[0].OneofWrappers = []any{
		(*SpeedsetPlusRequestPayloads_SetVspControlCommand)(nil),
		(*SpeedsetPlusRequestPayloads_GetDeviceInformation)(nil),
		(*SpeedsetPlusRequestPayloads_GetStatus)(nil),
		(*SpeedsetPlusRequestPayloads_GetConfiguration)(nil),
		(*SpeedsetPlusRequestPayloads_SetConfiguration)(nil),
		(*SpeedsetPlusRequestPayloads_GetActiveErrors)(nil),
	}
	file_speedsetplus_proto_msgTypes[1].OneofWrappers = []any{
		(*SpeedsetPlusResponsePayloads_GetDeviceInformation)(nil),
		(*SpeedsetPlusResponsePayloads_GetStatus)(nil),
		(*SpeedsetPlusResponsePayloads_GetConfiguration)(nil),
		(*SpeedsetPlusResponsePayloads_GetActiveErrors)(nil),
	}
	file_speedsetplus_proto_msgTypes[2].OneofWrappers = []any{
		(*SpeedsetPlusInfoPayloads_Status)(nil),
		(*SpeedsetPlusInfoPayloads_Configuration)(nil),
	}
	file_speedsetplus_proto_msgTypes[3].OneofWrappers = []any{
		(*CommandRequestMessage_Common)(nil),
		(*CommandRequestMessage_Speedsetplus)(nil),
	}
	file_speedsetplus_proto_msgTypes[4].OneofWrappers = []any{
		(*CommandResponseMessage_Common)(nil),
		(*CommandResponseMessage_Speedsetplus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_speedsetplus_proto_rawDesc), len(file_speedsetplus_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_speedsetplus_proto_goTypes,
		DependencyIndexes: file_speedsetplus_proto_depIdxs,
		EnumInfos:         file_speedsetplus_proto_enumTypes,
		MessageInfos:      file_speedsetplus_proto_msgTypes,
	}.Build()
	File_speedsetplus_proto = out.File
	file_speedsetplus_proto_goTypes = nil
	file_speedsetplus_proto_depIdxs = nil
}
