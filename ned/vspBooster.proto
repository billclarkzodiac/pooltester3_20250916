/***************************************************************
Protobuf Message VSP Booster proto file 
- command/response definition
-
-in SDK Init
#define NED_CATEGORY 	"vspBoosterGen2"    
#define NED_MODEL_ID 	"vsp-booster-gen2"   
#define NED_MODEL_NAME 	"WP000246"    	//sku
- 
****************************************************************/
syntax = "proto3";
option go_package = "pooltester3_20250916/ned";

import "commonClientMessages.proto";

package vspBooster;


/************************************************************
*** VSP Booster Messages ***
************************************************************/
message VspBoosterRequestPayloads {
    oneof request_type {
        SetVspBoosterControlCommandRequestPayload set_vsp_booster_control_command = 1;

        GetVspBoosterDeviceInformationRequestPayload get_device_information = 2;
        GetVspBoosterStatusRequestPayload get_status = 3;
        GetVspBoosterConfigurationRequestPayload get_configuration = 4;
        SetVspBoosterConfigurationRequestPayload set_configuration = 5;
        GetVspBoosterActiveErrorsRequestPayload get_active_errors = 7;
    }
}

message VspBoosterResponsePayloads {
    oneof response_type {
        GetVspBoosterDeviceInformationResponsePayload get_device_information = 1;
        GetVspBoosterStatusResponsePayload get_status = 2;
        GetVspBoosterConfigurationResponsePayload get_configuration = 3;
        GetVspBoosterActiveErrorsResponsePayload get_active_errors = 4;
    }
}

message VspBoosterInfoPayloads { // Placeholder
    oneof announce_type {
        VspBoosterStatus status = 1;
        VspBoosterConfiguration configuration = 2;
    }
}

/************************************************************
*** VspBooster Wrappers ***
************************************************************/
// a command wrapper message with a type field
// MQTT topic: 'cmd/<category>/<serial number>/req'
message CommandRequestMessage {
    string command_uuid = 1;

    oneof payload {
        ned.CommonRequestPayloads common = 2;
        VspBoosterRequestPayloads vsp_booster = 3;
    }
}

// a response wrapper message with a message type field
// and the required response code
// MQTT topic: 'cmd/<category>/<serial number>/res'
message CommandResponseMessage {
    string command_uuid = 1;

    //required
    ned.ResponseCode response_code = 2;

    oneof payload {
        ned.CommonResponsePayloads common = 3;
        VspBoosterResponsePayloads vsp_booster = 4;
    }
}

// an Info message wrapper
// MQTT  topic: 'async/<category>/<serial number>/info'
// Info messages can be a variety of message types
message InfoMessage {
    VspBoosterInfoPayloads payload = 1;
}

// a Telemetry message wrapper
// MQTT topic: 'async/<category>/<serial number>/dt'
// Telemetry messages do not need a message 'type'
message TelemetryMessage {
    int32 rssi = 1;
    int32 motor_rpm = 2;            // Current RPM of the motor
    int32 motor_current = 4;        // Current motor current in rms A
    int32 demand_rpm = 3;           // RPM set by the user
    int32 torque = 5;               // Current torque in Nm
    int32 inverter_input_power = 6; // Inverter input power in W
    int32 dc_bus_voltage = 7;       // DC bus voltage in V
    int32 ambient_temperature = 8;  // Ambient temperature in deci-degree Celsius (0.1 Celsius)
    int32 output_power = 9;         // Inverter output power in W
    int32 motor_line_voltage = 10;  // Motor line voltage in V
    int32 motor_input_power = 11;   // Motor input power in W
    int32 ipm_temperature = 12;     // IPM temperature in deci-degree Celsius (0.1 Celsius)
    int32 total_faults = 13;        // Total number of faults encountered
}

/***************************************************************
*** VspBooster Common structures ***
****************************************************************/

message VspBoosterStatus {
    int32 power = 1;        // Motor Control, 0 = off, 1 = on
    int32 demand_rpm = 2;   // configured RPM
}

message VspBoosterConfiguration {
    //int32 placeholder = 1; // Placeholder for future configuration parameters
}



/***************************************************************
*** VspBooster Messages Payloads ***
****************************************************************/

//Command and Response
//MESSAGE_SET_VSP_BOOSTER_OUTPUT_CMD
message SetVspBoosterControlCommandRequestPayload {
    int32 power = 1; // Motor Control, 0 = off, 1 = on
    int32 set_demand_rpm = 2; // RPM
}

//MESSAGE_GET_DEVICE_INFORMATION_RSP
message GetVspBoosterDeviceInformationRequestPayload { }
message GetVspBoosterDeviceInformationResponsePayload {
    string motor_serial_number = 1;     // Serial number of the motor board
    string motor_firmware_version = 2;
}


//MESSAGE_GET_STATUS_RSP
message GetVspBoosterStatusRequestPayload {}
message GetVspBoosterStatusResponsePayload {
    VspBoosterStatus status = 1;
}


//Configuration
message GetVspBoosterConfigurationRequestPayload {}
message GetVspBoosterConfigurationResponsePayload {
    VspBoosterConfiguration configuration = 1;
}


message SetVspBoosterConfigurationRequestPayload {
    VspBoosterConfiguration configuration = 1;
}

/************************************************************
*** VspBooster Errors ***
************************************************************/

message GetVspBoosterActiveErrorsRequestPayload {}
message GetVspBoosterActiveErrorsResponsePayload {
    ActiveErrors active_errors = 1;
}

// a device Error message 
// MQTT topic: 'async/<category>/<serial number>/error'
message DeviceErrorMessage {
    ActiveErrors active_errors = 1;
}

enum VspBoosterErrorCode {
    UNKNOWN_ERROR = 0;
    VSP_BOOSTER_ERROR_SW_IPM_OVERCURRENT = 1;  
    VSP_BOOSTER_ERROR_DC_OVERVOLTAGE = 2;     
    VSP_BOOSTER_ERROR_DC_UNDERVOLTAGE = 3;    
    //more to be defined as needed
}

message VspBoosterError {
    VspBoosterErrorCode error_code = 1;
    string error_message = 2;           // Human readable error message, provided by the device
}

message ActiveErrors {
    // List of active errors (empty if back to normal)
    repeated VspBoosterError error_list = 1;
}
