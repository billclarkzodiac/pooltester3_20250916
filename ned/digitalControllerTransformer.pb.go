//**************************************************************
//Protobuf Message InfiniteWaterColorDCT proto file
//- command/response definition
//**************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: digitalControllerTransformer.proto

package ned

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LightControlType int32

const (
	LightControlType_LIGHT_CONTROL_UKNOWN   LightControlType = 0
	LightControlType_LIGHT_CONTROL_ON       LightControlType = 1
	LightControlType_LIGHT_CONTROL_OFF      LightControlType = 2
	LightControlType_LIGHT_CONTROL_BLINKING LightControlType = 3
)

// Enum value maps for LightControlType.
var (
	LightControlType_name = map[int32]string{
		0: "LIGHT_CONTROL_UKNOWN",
		1: "LIGHT_CONTROL_ON",
		2: "LIGHT_CONTROL_OFF",
		3: "LIGHT_CONTROL_BLINKING",
	}
	LightControlType_value = map[string]int32{
		"LIGHT_CONTROL_UKNOWN":   0,
		"LIGHT_CONTROL_ON":       1,
		"LIGHT_CONTROL_OFF":      2,
		"LIGHT_CONTROL_BLINKING": 3,
	}
)

func (x LightControlType) Enum() *LightControlType {
	p := new(LightControlType)
	*p = x
	return p
}

func (x LightControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LightControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_digitalControllerTransformer_proto_enumTypes[0].Descriptor()
}

func (LightControlType) Type() protoreflect.EnumType {
	return &file_digitalControllerTransformer_proto_enumTypes[0]
}

func (x LightControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LightControlType.Descriptor instead.
func (LightControlType) EnumDescriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{0}
}

type DctMode int32

const (
	DctMode_DCT_MODE_UKNOWN       DctMode = 0
	DctMode_DCT_MODE_INSTALLATION DctMode = 1
	DctMode_DCT_MODE_NORMAL       DctMode = 2
)

// Enum value maps for DctMode.
var (
	DctMode_name = map[int32]string{
		0: "DCT_MODE_UKNOWN",
		1: "DCT_MODE_INSTALLATION",
		2: "DCT_MODE_NORMAL",
	}
	DctMode_value = map[string]int32{
		"DCT_MODE_UKNOWN":       0,
		"DCT_MODE_INSTALLATION": 1,
		"DCT_MODE_NORMAL":       2,
	}
)

func (x DctMode) Enum() *DctMode {
	p := new(DctMode)
	*p = x
	return p
}

func (x DctMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DctMode) Descriptor() protoreflect.EnumDescriptor {
	return file_digitalControllerTransformer_proto_enumTypes[1].Descriptor()
}

func (DctMode) Type() protoreflect.EnumType {
	return &file_digitalControllerTransformer_proto_enumTypes[1]
}

func (x DctMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DctMode.Descriptor instead.
func (DctMode) EnumDescriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{1}
}

type LightErrorCode int32

const (
	LightErrorCode_UNKNOWN_ERROR          LightErrorCode = 0
	LightErrorCode_HIGH_TEMPERATURE_ERROR LightErrorCode = 1
)

// Enum value maps for LightErrorCode.
var (
	LightErrorCode_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "HIGH_TEMPERATURE_ERROR",
	}
	LightErrorCode_value = map[string]int32{
		"UNKNOWN_ERROR":          0,
		"HIGH_TEMPERATURE_ERROR": 1,
	}
)

func (x LightErrorCode) Enum() *LightErrorCode {
	p := new(LightErrorCode)
	*p = x
	return p
}

func (x LightErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LightErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_digitalControllerTransformer_proto_enumTypes[2].Descriptor()
}

func (LightErrorCode) Type() protoreflect.EnumType {
	return &file_digitalControllerTransformer_proto_enumTypes[2]
}

func (x LightErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LightErrorCode.Descriptor instead.
func (LightErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{2}
}

// ***********************************************************
// ** InfiniteWaterColorDCT Messages ***
// **********************************************************
type DCTRequests struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*DCTRequests_SetDct20Lights
	//	*DCTRequests_GetDct20Status
	//	*DCTRequests_GetDct20LightStatus
	//	*DCTRequests_GetDct20AllLightsInformation
	//	*DCTRequests_GetDct20LightInformation
	//	*DCTRequests_RemoveLight
	//	*DCTRequests_SetConfiguration
	//	*DCTRequests_GetConfiguration
	//	*DCTRequests_SetMaxBrightness
	//	*DCTRequests_SwapAddresses
	//	*DCTRequests_GetActiveErrors
	RequestType   isDCTRequests_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DCTRequests) Reset() {
	*x = DCTRequests{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DCTRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DCTRequests) ProtoMessage() {}

func (x *DCTRequests) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DCTRequests.ProtoReflect.Descriptor instead.
func (*DCTRequests) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{0}
}

func (x *DCTRequests) GetRequestType() isDCTRequests_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *DCTRequests) GetSetDct20Lights() *SetLightConfigurationRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_SetDct20Lights); ok {
			return x.SetDct20Lights
		}
	}
	return nil
}

func (x *DCTRequests) GetGetDct20Status() *GetDctStatusRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_GetDct20Status); ok {
			return x.GetDct20Status
		}
	}
	return nil
}

func (x *DCTRequests) GetGetDct20LightStatus() *GetLightStatusRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_GetDct20LightStatus); ok {
			return x.GetDct20LightStatus
		}
	}
	return nil
}

func (x *DCTRequests) GetGetDct20AllLightsInformation() *GetDctInformationRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_GetDct20AllLightsInformation); ok {
			return x.GetDct20AllLightsInformation
		}
	}
	return nil
}

func (x *DCTRequests) GetGetDct20LightInformation() *GetLightInformationRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_GetDct20LightInformation); ok {
			return x.GetDct20LightInformation
		}
	}
	return nil
}

func (x *DCTRequests) GetRemoveLight() *RemoveLightRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_RemoveLight); ok {
			return x.RemoveLight
		}
	}
	return nil
}

func (x *DCTRequests) GetSetConfiguration() *SetDctConfigurationRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_SetConfiguration); ok {
			return x.SetConfiguration
		}
	}
	return nil
}

func (x *DCTRequests) GetGetConfiguration() *GetDctConfigurationRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_GetConfiguration); ok {
			return x.GetConfiguration
		}
	}
	return nil
}

func (x *DCTRequests) GetSetMaxBrightness() *SetLightMaxBrightnessRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_SetMaxBrightness); ok {
			return x.SetMaxBrightness
		}
	}
	return nil
}

func (x *DCTRequests) GetSwapAddresses() *SwapLightAddressesRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_SwapAddresses); ok {
			return x.SwapAddresses
		}
	}
	return nil
}

func (x *DCTRequests) GetGetActiveErrors() *GetActiveErrorsRequest {
	if x != nil {
		if x, ok := x.RequestType.(*DCTRequests_GetActiveErrors); ok {
			return x.GetActiveErrors
		}
	}
	return nil
}

type isDCTRequests_RequestType interface {
	isDCTRequests_RequestType()
}

type DCTRequests_SetDct20Lights struct {
	SetDct20Lights *SetLightConfigurationRequest `protobuf:"bytes,1,opt,name=set_dct20_lights,json=setDct20Lights,proto3,oneof"`
}

type DCTRequests_GetDct20Status struct {
	GetDct20Status *GetDctStatusRequest `protobuf:"bytes,2,opt,name=get_dct20_status,json=getDct20Status,proto3,oneof"`
}

type DCTRequests_GetDct20LightStatus struct {
	GetDct20LightStatus *GetLightStatusRequest `protobuf:"bytes,3,opt,name=get_dct20_light_status,json=getDct20LightStatus,proto3,oneof"`
}

type DCTRequests_GetDct20AllLightsInformation struct {
	GetDct20AllLightsInformation *GetDctInformationRequest `protobuf:"bytes,4,opt,name=get_dct20_all_lights_information,json=getDct20AllLightsInformation,proto3,oneof"`
}

type DCTRequests_GetDct20LightInformation struct {
	GetDct20LightInformation *GetLightInformationRequest `protobuf:"bytes,5,opt,name=get_dct20_light_information,json=getDct20LightInformation,proto3,oneof"`
}

type DCTRequests_RemoveLight struct {
	RemoveLight *RemoveLightRequest `protobuf:"bytes,6,opt,name=remove_light,json=removeLight,proto3,oneof"`
}

type DCTRequests_SetConfiguration struct {
	SetConfiguration *SetDctConfigurationRequest `protobuf:"bytes,7,opt,name=set_configuration,json=setConfiguration,proto3,oneof"`
}

type DCTRequests_GetConfiguration struct {
	GetConfiguration *GetDctConfigurationRequest `protobuf:"bytes,8,opt,name=get_configuration,json=getConfiguration,proto3,oneof"`
}

type DCTRequests_SetMaxBrightness struct {
	SetMaxBrightness *SetLightMaxBrightnessRequest `protobuf:"bytes,9,opt,name=set_max_brightness,json=setMaxBrightness,proto3,oneof"`
}

type DCTRequests_SwapAddresses struct {
	SwapAddresses *SwapLightAddressesRequest `protobuf:"bytes,10,opt,name=swap_addresses,json=swapAddresses,proto3,oneof"`
}

type DCTRequests_GetActiveErrors struct {
	GetActiveErrors *GetActiveErrorsRequest `protobuf:"bytes,11,opt,name=get_active_errors,json=getActiveErrors,proto3,oneof"`
}

func (*DCTRequests_SetDct20Lights) isDCTRequests_RequestType() {}

func (*DCTRequests_GetDct20Status) isDCTRequests_RequestType() {}

func (*DCTRequests_GetDct20LightStatus) isDCTRequests_RequestType() {}

func (*DCTRequests_GetDct20AllLightsInformation) isDCTRequests_RequestType() {}

func (*DCTRequests_GetDct20LightInformation) isDCTRequests_RequestType() {}

func (*DCTRequests_RemoveLight) isDCTRequests_RequestType() {}

func (*DCTRequests_SetConfiguration) isDCTRequests_RequestType() {}

func (*DCTRequests_GetConfiguration) isDCTRequests_RequestType() {}

func (*DCTRequests_SetMaxBrightness) isDCTRequests_RequestType() {}

func (*DCTRequests_SwapAddresses) isDCTRequests_RequestType() {}

func (*DCTRequests_GetActiveErrors) isDCTRequests_RequestType() {}

type InfiniteWaterColorDCTResponsePayloads struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ResponseType:
	//
	//	*InfiniteWaterColorDCTResponsePayloads_GetDct20Status
	//	*InfiniteWaterColorDCTResponsePayloads_GetDct20LightStatus
	//	*InfiniteWaterColorDCTResponsePayloads_GetDct20AllLightsInformation
	//	*InfiniteWaterColorDCTResponsePayloads_GetDct20LightInformation
	//	*InfiniteWaterColorDCTResponsePayloads_GetConfiguration
	//	*InfiniteWaterColorDCTResponsePayloads_GetActiveErrors
	ResponseType  isInfiniteWaterColorDCTResponsePayloads_ResponseType `protobuf_oneof:"response_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfiniteWaterColorDCTResponsePayloads) Reset() {
	*x = InfiniteWaterColorDCTResponsePayloads{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfiniteWaterColorDCTResponsePayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfiniteWaterColorDCTResponsePayloads) ProtoMessage() {}

func (x *InfiniteWaterColorDCTResponsePayloads) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfiniteWaterColorDCTResponsePayloads.ProtoReflect.Descriptor instead.
func (*InfiniteWaterColorDCTResponsePayloads) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{1}
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetResponseType() isInfiniteWaterColorDCTResponsePayloads_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetGetDct20Status() *GetDctStatusResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*InfiniteWaterColorDCTResponsePayloads_GetDct20Status); ok {
			return x.GetDct20Status
		}
	}
	return nil
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetGetDct20LightStatus() *GetLightStatusResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*InfiniteWaterColorDCTResponsePayloads_GetDct20LightStatus); ok {
			return x.GetDct20LightStatus
		}
	}
	return nil
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetGetDct20AllLightsInformation() *GetDctInformationResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*InfiniteWaterColorDCTResponsePayloads_GetDct20AllLightsInformation); ok {
			return x.GetDct20AllLightsInformation
		}
	}
	return nil
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetGetDct20LightInformation() *GetLightInformationResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*InfiniteWaterColorDCTResponsePayloads_GetDct20LightInformation); ok {
			return x.GetDct20LightInformation
		}
	}
	return nil
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetGetConfiguration() *GetDctConfigurationResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*InfiniteWaterColorDCTResponsePayloads_GetConfiguration); ok {
			return x.GetConfiguration
		}
	}
	return nil
}

func (x *InfiniteWaterColorDCTResponsePayloads) GetGetActiveErrors() *GetActiveErrorsResponse {
	if x != nil {
		if x, ok := x.ResponseType.(*InfiniteWaterColorDCTResponsePayloads_GetActiveErrors); ok {
			return x.GetActiveErrors
		}
	}
	return nil
}

type isInfiniteWaterColorDCTResponsePayloads_ResponseType interface {
	isInfiniteWaterColorDCTResponsePayloads_ResponseType()
}

type InfiniteWaterColorDCTResponsePayloads_GetDct20Status struct {
	GetDct20Status *GetDctStatusResponse `protobuf:"bytes,1,opt,name=get_dct20_status,json=getDct20Status,proto3,oneof"`
}

type InfiniteWaterColorDCTResponsePayloads_GetDct20LightStatus struct {
	GetDct20LightStatus *GetLightStatusResponse `protobuf:"bytes,2,opt,name=get_dct20_light_status,json=getDct20LightStatus,proto3,oneof"`
}

type InfiniteWaterColorDCTResponsePayloads_GetDct20AllLightsInformation struct {
	GetDct20AllLightsInformation *GetDctInformationResponse `protobuf:"bytes,3,opt,name=get_dct20_all_lights_information,json=getDct20AllLightsInformation,proto3,oneof"`
}

type InfiniteWaterColorDCTResponsePayloads_GetDct20LightInformation struct {
	GetDct20LightInformation *GetLightInformationResponse `protobuf:"bytes,4,opt,name=get_dct20_light_information,json=getDct20LightInformation,proto3,oneof"`
}

type InfiniteWaterColorDCTResponsePayloads_GetConfiguration struct {
	GetConfiguration *GetDctConfigurationResponse `protobuf:"bytes,5,opt,name=get_configuration,json=getConfiguration,proto3,oneof"`
}

type InfiniteWaterColorDCTResponsePayloads_GetActiveErrors struct {
	GetActiveErrors *GetActiveErrorsResponse `protobuf:"bytes,6,opt,name=get_active_errors,json=getActiveErrors,proto3,oneof"`
}

func (*InfiniteWaterColorDCTResponsePayloads_GetDct20Status) isInfiniteWaterColorDCTResponsePayloads_ResponseType() {
}

func (*InfiniteWaterColorDCTResponsePayloads_GetDct20LightStatus) isInfiniteWaterColorDCTResponsePayloads_ResponseType() {
}

func (*InfiniteWaterColorDCTResponsePayloads_GetDct20AllLightsInformation) isInfiniteWaterColorDCTResponsePayloads_ResponseType() {
}

func (*InfiniteWaterColorDCTResponsePayloads_GetDct20LightInformation) isInfiniteWaterColorDCTResponsePayloads_ResponseType() {
}

func (*InfiniteWaterColorDCTResponsePayloads_GetConfiguration) isInfiniteWaterColorDCTResponsePayloads_ResponseType() {
}

func (*InfiniteWaterColorDCTResponsePayloads_GetActiveErrors) isInfiniteWaterColorDCTResponsePayloads_ResponseType() {
}

type InfiniteWaterColorDCTInfoPayloads struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AnnounceType:
	//
	//	*InfiniteWaterColorDCTInfoPayloads_LightAdded
	//	*InfiniteWaterColorDCTInfoPayloads_DctStatusChanged
	AnnounceType  isInfiniteWaterColorDCTInfoPayloads_AnnounceType `protobuf_oneof:"announce_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfiniteWaterColorDCTInfoPayloads) Reset() {
	*x = InfiniteWaterColorDCTInfoPayloads{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfiniteWaterColorDCTInfoPayloads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfiniteWaterColorDCTInfoPayloads) ProtoMessage() {}

func (x *InfiniteWaterColorDCTInfoPayloads) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfiniteWaterColorDCTInfoPayloads.ProtoReflect.Descriptor instead.
func (*InfiniteWaterColorDCTInfoPayloads) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{2}
}

func (x *InfiniteWaterColorDCTInfoPayloads) GetAnnounceType() isInfiniteWaterColorDCTInfoPayloads_AnnounceType {
	if x != nil {
		return x.AnnounceType
	}
	return nil
}

func (x *InfiniteWaterColorDCTInfoPayloads) GetLightAdded() *LightAddedInfoPayload {
	if x != nil {
		if x, ok := x.AnnounceType.(*InfiniteWaterColorDCTInfoPayloads_LightAdded); ok {
			return x.LightAdded
		}
	}
	return nil
}

func (x *InfiniteWaterColorDCTInfoPayloads) GetDctStatusChanged() *DctStatusChangedInfoPayload {
	if x != nil {
		if x, ok := x.AnnounceType.(*InfiniteWaterColorDCTInfoPayloads_DctStatusChanged); ok {
			return x.DctStatusChanged
		}
	}
	return nil
}

type isInfiniteWaterColorDCTInfoPayloads_AnnounceType interface {
	isInfiniteWaterColorDCTInfoPayloads_AnnounceType()
}

type InfiniteWaterColorDCTInfoPayloads_LightAdded struct {
	LightAdded *LightAddedInfoPayload `protobuf:"bytes,1,opt,name=light_added,json=lightAdded,proto3,oneof"`
}

type InfiniteWaterColorDCTInfoPayloads_DctStatusChanged struct {
	DctStatusChanged *DctStatusChangedInfoPayload `protobuf:"bytes,2,opt,name=dct_status_changed,json=dctStatusChanged,proto3,oneof"`
}

func (*InfiniteWaterColorDCTInfoPayloads_LightAdded) isInfiniteWaterColorDCTInfoPayloads_AnnounceType() {
}

func (*InfiniteWaterColorDCTInfoPayloads_DctStatusChanged) isInfiniteWaterColorDCTInfoPayloads_AnnounceType() {
}

// a command wrapper message with a type field
// MQTT topic: 'cmd/<category>/<serial number>/req'



func (*CommandRequestMessage) ProtoMessage() {}


// Deprecated: Use CommandRequestMessage.ProtoReflect.Descriptor instead.
func (*CommandRequestMessage) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{3}
}





type isCommandRequestMessage_Payload interface {
	isCommandRequestMessage_Payload()
}

type CommandRequestMessage_Common struct {
	Common *CommonRequestPayloads `protobuf:"bytes,2,opt,name=common,proto3,oneof"`
}

type CommandRequestMessage_Icl struct {
	Icl *DCTRequests `protobuf:"bytes,3,opt,name=icl,proto3,oneof"`
}

func (*CommandRequestMessage_Common) isCommandRequestMessage_Payload() {}

func (*CommandRequestMessage_Icl) isCommandRequestMessage_Payload() {}

// a response wrapper message with a message type field
// and the required response code
// MQTT topic: 'cmd/<category>/<serial number>/res'



func (*CommandResponseMessage) ProtoMessage() {}


// Deprecated: Use CommandResponseMessage.ProtoReflect.Descriptor instead.
func (*CommandResponseMessage) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{4}
}






type isCommandResponseMessage_Payload interface {
	isCommandResponseMessage_Payload()
}

type CommandResponseMessage_Common struct {
	Common *CommonResponsePayloads `protobuf:"bytes,3,opt,name=common,proto3,oneof"`
}

type CommandResponseMessage_Icl struct {
	Icl *InfiniteWaterColorDCTResponsePayloads `protobuf:"bytes,4,opt,name=icl,proto3,oneof"`
}

func (*CommandResponseMessage_Common) isCommandResponseMessage_Payload() {}

func (*CommandResponseMessage_Icl) isCommandResponseMessage_Payload() {}

// an Info message wrapper
// MQTT  topic: 'async/<category>/<serial number>/info'
// Info messages can be a variety of message types
type InfoMessage struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Payload       *InfiniteWaterColorDCTInfoPayloads `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoMessage) Reset() {
	*x = InfoMessage{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoMessage) ProtoMessage() {}

func (x *InfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoMessage.ProtoReflect.Descriptor instead.
func (*InfoMessage) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{5}
}

func (x *InfoMessage) GetPayload() *InfiniteWaterColorDCTInfoPayloads {
	if x != nil {
		return x.Payload
	}
	return nil
}

// a Telemetry message wrapper
// MQTT topic: 'async/<category>/<serial number>/dt'
// Telemetry messages do not need a message 'type'
type TelemetryMessage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Power                      int32                  `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`                                               // 0 - 330 W
	Current                    int32                  `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`                                           // 0 - 25000 milliAmpere
	Voltage                    float64                `protobuf:"fixed64,3,opt,name=voltage,proto3" json:"voltage,omitempty"`                                          // 11.9 - 16.1 VAC
	BoardTemperature           int32                  `protobuf:"varint,4,opt,name=board_temperature,json=boardTemperature,proto3" json:"board_temperature,omitempty"` // deci-degree celcius (0.1 celsius)
	LightsTelemetry            []*LightTelemetry      `protobuf:"bytes,5,rep,name=lights_telemetry,json=lightsTelemetry,proto3" json:"lights_telemetry,omitempty"`
	Rssi                       int32                  `protobuf:"varint,6,opt,name=rssi,proto3" json:"rssi,omitempty"`                                                                                   // Received Signal Strength Indicator
	DctPowerDeratingPercentage int32                  `protobuf:"varint,7,opt,name=dct_power_derating_percentage,json=dctPowerDeratingPercentage,proto3" json:"dct_power_derating_percentage,omitempty"` // 0 - 100 percent - 100% means no derating
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *TelemetryMessage) Reset() {
	*x = TelemetryMessage{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryMessage) ProtoMessage() {}

func (x *TelemetryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryMessage.ProtoReflect.Descriptor instead.
func (*TelemetryMessage) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{6}
}

func (x *TelemetryMessage) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *TelemetryMessage) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TelemetryMessage) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *TelemetryMessage) GetBoardTemperature() int32 {
	if x != nil {
		return x.BoardTemperature
	}
	return 0
}

func (x *TelemetryMessage) GetLightsTelemetry() []*LightTelemetry {
	if x != nil {
		return x.LightsTelemetry
	}
	return nil
}

func (x *TelemetryMessage) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *TelemetryMessage) GetDctPowerDeratingPercentage() int32 {
	if x != nil {
		return x.DctPowerDeratingPercentage
	}
	return 0
}

type LightTelemetry struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Address                 int32                  `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	LightTemperature        int32                  `protobuf:"varint,2,opt,name=light_temperature,json=lightTemperature,proto3" json:"light_temperature,omitempty"`                        // deci-degree celcius (0.1 celsius)
	LightDeratingPercentage int32                  `protobuf:"varint,3,opt,name=light_derating_percentage,json=lightDeratingPercentage,proto3" json:"light_derating_percentage,omitempty"` // 0 - 100 percent- 100% means no derating
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LightTelemetry) Reset() {
	*x = LightTelemetry{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightTelemetry) ProtoMessage() {}

func (x *LightTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightTelemetry.ProtoReflect.Descriptor instead.
func (*LightTelemetry) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{7}
}

func (x *LightTelemetry) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *LightTelemetry) GetLightTemperature() int32 {
	if x != nil {
		return x.LightTemperature
	}
	return 0
}

func (x *LightTelemetry) GetLightDeratingPercentage() int32 {
	if x != nil {
		return x.LightDeratingPercentage
	}
	return 0
}

type LightJandyDrive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetColor   int32                  `protobuf:"varint,1,opt,name=target_color,json=targetColor,proto3" json:"target_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightJandyDrive) Reset() {
	*x = LightJandyDrive{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightJandyDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightJandyDrive) ProtoMessage() {}

func (x *LightJandyDrive) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightJandyDrive.ProtoReflect.Descriptor instead.
func (*LightJandyDrive) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{8}
}

func (x *LightJandyDrive) GetTargetColor() int32 {
	if x != nil {
		return x.TargetColor
	}
	return 0
}

type LightRgbwDrive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Red           int32                  `protobuf:"varint,1,opt,name=red,proto3" json:"red,omitempty"`
	Green         int32                  `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	Blue          int32                  `protobuf:"varint,3,opt,name=blue,proto3" json:"blue,omitempty"`
	White         int32                  `protobuf:"varint,4,opt,name=white,proto3" json:"white,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightRgbwDrive) Reset() {
	*x = LightRgbwDrive{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightRgbwDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightRgbwDrive) ProtoMessage() {}

func (x *LightRgbwDrive) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightRgbwDrive.ProtoReflect.Descriptor instead.
func (*LightRgbwDrive) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{9}
}

func (x *LightRgbwDrive) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *LightRgbwDrive) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *LightRgbwDrive) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *LightRgbwDrive) GetWhite() int32 {
	if x != nil {
		return x.White
	}
	return 0
}

type LightShowDrive struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SlideDurationSeconds int32                  `protobuf:"varint,1,opt,name=slide_duration_seconds,json=slideDurationSeconds,proto3" json:"slide_duration_seconds,omitempty"`
	TransitionPercent    int32                  `protobuf:"varint,2,opt,name=transition_percent,json=transitionPercent,proto3" json:"transition_percent,omitempty"`
	Colors               []*LightRgbwDrive      `protobuf:"bytes,3,rep,name=colors,proto3" json:"colors,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LightShowDrive) Reset() {
	*x = LightShowDrive{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightShowDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightShowDrive) ProtoMessage() {}

func (x *LightShowDrive) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightShowDrive.ProtoReflect.Descriptor instead.
func (*LightShowDrive) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{10}
}

func (x *LightShowDrive) GetSlideDurationSeconds() int32 {
	if x != nil {
		return x.SlideDurationSeconds
	}
	return 0
}

func (x *LightShowDrive) GetTransitionPercent() int32 {
	if x != nil {
		return x.TransitionPercent
	}
	return 0
}

func (x *LightShowDrive) GetColors() []*LightRgbwDrive {
	if x != nil {
		return x.Colors
	}
	return nil
}

type LightDriveMode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to LightDriveMode:
	//
	//	*LightDriveMode_JandyDrive
	//	*LightDriveMode_RgbwDrive
	//	*LightDriveMode_ShowDrive
	LightDriveMode isLightDriveMode_LightDriveMode `protobuf_oneof:"light_drive_mode"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LightDriveMode) Reset() {
	*x = LightDriveMode{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightDriveMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightDriveMode) ProtoMessage() {}

func (x *LightDriveMode) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightDriveMode.ProtoReflect.Descriptor instead.
func (*LightDriveMode) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{11}
}

func (x *LightDriveMode) GetLightDriveMode() isLightDriveMode_LightDriveMode {
	if x != nil {
		return x.LightDriveMode
	}
	return nil
}

func (x *LightDriveMode) GetJandyDrive() *LightJandyDrive {
	if x != nil {
		if x, ok := x.LightDriveMode.(*LightDriveMode_JandyDrive); ok {
			return x.JandyDrive
		}
	}
	return nil
}

func (x *LightDriveMode) GetRgbwDrive() *LightRgbwDrive {
	if x != nil {
		if x, ok := x.LightDriveMode.(*LightDriveMode_RgbwDrive); ok {
			return x.RgbwDrive
		}
	}
	return nil
}

func (x *LightDriveMode) GetShowDrive() *LightShowDrive {
	if x != nil {
		if x, ok := x.LightDriveMode.(*LightDriveMode_ShowDrive); ok {
			return x.ShowDrive
		}
	}
	return nil
}

type isLightDriveMode_LightDriveMode interface {
	isLightDriveMode_LightDriveMode()
}

type LightDriveMode_JandyDrive struct {
	JandyDrive *LightJandyDrive `protobuf:"bytes,1,opt,name=jandy_drive,json=jandyDrive,proto3,oneof"`
}

type LightDriveMode_RgbwDrive struct {
	RgbwDrive *LightRgbwDrive `protobuf:"bytes,2,opt,name=rgbw_drive,json=rgbwDrive,proto3,oneof"`
}

type LightDriveMode_ShowDrive struct {
	ShowDrive *LightShowDrive `protobuf:"bytes,3,opt,name=show_drive,json=showDrive,proto3,oneof"`
}

func (*LightDriveMode_JandyDrive) isLightDriveMode_LightDriveMode() {}

func (*LightDriveMode_RgbwDrive) isLightDriveMode_LightDriveMode() {}

func (*LightDriveMode_ShowDrive) isLightDriveMode_LightDriveMode() {}

type DctStatus struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DctWattageCapacity int32                  `protobuf:"varint,1,opt,name=dct_wattage_capacity,json=dctWattageCapacity,proto3" json:"dct_wattage_capacity,omitempty"`
	LightsStatus       []*LightStatus         `protobuf:"bytes,2,rep,name=lights_status,json=lightsStatus,proto3" json:"lights_status,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DctStatus) Reset() {
	*x = DctStatus{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DctStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DctStatus) ProtoMessage() {}

func (x *DctStatus) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DctStatus.ProtoReflect.Descriptor instead.
func (*DctStatus) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{12}
}

func (x *DctStatus) GetDctWattageCapacity() int32 {
	if x != nil {
		return x.DctWattageCapacity
	}
	return 0
}

func (x *DctStatus) GetLightsStatus() []*LightStatus {
	if x != nil {
		return x.LightsStatus
	}
	return nil
}

type LightStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       int32                  `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	ControlType   LightControlType       `protobuf:"varint,2,opt,name=control_type,json=controlType,proto3,enum=icl.LightControlType" json:"control_type,omitempty"`
	Brightness    int32                  `protobuf:"varint,3,opt,name=brightness,proto3" json:"brightness,omitempty"`
	MaxBrightness int32                  `protobuf:"varint,4,opt,name=max_brightness,json=maxBrightness,proto3" json:"max_brightness,omitempty"`
	DriveMode     *LightDriveMode        `protobuf:"bytes,6,opt,name=drive_mode,json=driveMode,proto3" json:"drive_mode,omitempty"`
	IsAvailable   bool                   `protobuf:"varint,7,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightStatus) Reset() {
	*x = LightStatus{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightStatus) ProtoMessage() {}

func (x *LightStatus) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightStatus.ProtoReflect.Descriptor instead.
func (*LightStatus) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{13}
}

func (x *LightStatus) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *LightStatus) GetControlType() LightControlType {
	if x != nil {
		return x.ControlType
	}
	return LightControlType_LIGHT_CONTROL_UKNOWN
}

func (x *LightStatus) GetBrightness() int32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *LightStatus) GetMaxBrightness() int32 {
	if x != nil {
		return x.MaxBrightness
	}
	return 0
}

func (x *LightStatus) GetDriveMode() *LightDriveMode {
	if x != nil {
		return x.DriveMode
	}
	return nil
}

func (x *LightStatus) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type LightDeviceInformation struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Address         int32                  `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Model           string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	FirmwareVersion string                 `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SerialNumber    string                 `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LightDeviceInformation) Reset() {
	*x = LightDeviceInformation{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightDeviceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightDeviceInformation) ProtoMessage() {}

func (x *LightDeviceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightDeviceInformation.ProtoReflect.Descriptor instead.
func (*LightDeviceInformation) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{14}
}

func (x *LightDeviceInformation) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *LightDeviceInformation) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LightDeviceInformation) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *LightDeviceInformation) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type LightConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       int32                  `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	ControlType   LightControlType       `protobuf:"varint,2,opt,name=control_type,json=controlType,proto3,enum=icl.LightControlType" json:"control_type,omitempty"`
	Brightness    int32                  `protobuf:"varint,3,opt,name=brightness,proto3" json:"brightness,omitempty"`
	DriveMode     *LightDriveMode        `protobuf:"bytes,4,opt,name=drive_mode,json=driveMode,proto3" json:"drive_mode,omitempty"`
	TimeToStart   int64                  `protobuf:"varint,5,opt,name=time_to_start,json=timeToStart,proto3" json:"time_to_start,omitempty"` // time since epoch in ms
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightConfiguration) Reset() {
	*x = LightConfiguration{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightConfiguration) ProtoMessage() {}

func (x *LightConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightConfiguration.ProtoReflect.Descriptor instead.
func (*LightConfiguration) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{15}
}

func (x *LightConfiguration) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *LightConfiguration) GetControlType() LightControlType {
	if x != nil {
		return x.ControlType
	}
	return LightControlType_LIGHT_CONTROL_UKNOWN
}

func (x *LightConfiguration) GetBrightness() int32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *LightConfiguration) GetDriveMode() *LightDriveMode {
	if x != nil {
		return x.DriveMode
	}
	return nil
}

func (x *LightConfiguration) GetTimeToStart() int64 {
	if x != nil {
		return x.TimeToStart
	}
	return 0
}

// MESSAGE_SET_DCT20_LIGHTS_CMD
type SetLightConfigurationRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	LightPatch    []*LightConfigurationPatch `protobuf:"bytes,1,rep,name=light_patch,json=lightPatch,proto3" json:"light_patch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLightConfigurationRequest) Reset() {
	*x = SetLightConfigurationRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLightConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLightConfigurationRequest) ProtoMessage() {}

func (x *SetLightConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLightConfigurationRequest.ProtoReflect.Descriptor instead.
func (*SetLightConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{16}
}

func (x *SetLightConfigurationRequest) GetLightPatch() []*LightConfigurationPatch {
	if x != nil {
		return x.LightPatch
	}
	return nil
}

type LightConfigurationPatch struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Address       int32                            `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Fields        []*LightConfigurationPatch_Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`                                 // Fields to update
	TimeToStart   int64                            `protobuf:"varint,3,opt,name=time_to_start,json=timeToStart,proto3" json:"time_to_start,omitempty"` // time since epoch in ms
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightConfigurationPatch) Reset() {
	*x = LightConfigurationPatch{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightConfigurationPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightConfigurationPatch) ProtoMessage() {}

func (x *LightConfigurationPatch) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightConfigurationPatch.ProtoReflect.Descriptor instead.
func (*LightConfigurationPatch) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{17}
}

func (x *LightConfigurationPatch) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *LightConfigurationPatch) GetFields() []*LightConfigurationPatch_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LightConfigurationPatch) GetTimeToStart() int64 {
	if x != nil {
		return x.TimeToStart
	}
	return 0
}

// MESSAGE_GET_DCT20_LIGHTS_RSP
type GetDctStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDctStatusRequest) Reset() {
	*x = GetDctStatusRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDctStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDctStatusRequest) ProtoMessage() {}

func (x *GetDctStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDctStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDctStatusRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{18}
}

type GetDctStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DctStatus     *DctStatus             `protobuf:"bytes,1,opt,name=dct_status,json=dctStatus,proto3" json:"dct_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDctStatusResponse) Reset() {
	*x = GetDctStatusResponse{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDctStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDctStatusResponse) ProtoMessage() {}

func (x *GetDctStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDctStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDctStatusResponse) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{19}
}

func (x *GetDctStatusResponse) GetDctStatus() *DctStatus {
	if x != nil {
		return x.DctStatus
	}
	return nil
}

type GetLightStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LightAddress  int32                  `protobuf:"varint,1,opt,name=light_address,json=lightAddress,proto3" json:"light_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLightStatusRequest) Reset() {
	*x = GetLightStatusRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLightStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLightStatusRequest) ProtoMessage() {}

func (x *GetLightStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLightStatusRequest.ProtoReflect.Descriptor instead.
func (*GetLightStatusRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{20}
}

func (x *GetLightStatusRequest) GetLightAddress() int32 {
	if x != nil {
		return x.LightAddress
	}
	return 0
}

type GetLightStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LightStatus   *LightStatus           `protobuf:"bytes,1,opt,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLightStatusResponse) Reset() {
	*x = GetLightStatusResponse{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLightStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLightStatusResponse) ProtoMessage() {}

func (x *GetLightStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLightStatusResponse.ProtoReflect.Descriptor instead.
func (*GetLightStatusResponse) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{21}
}

func (x *GetLightStatusResponse) GetLightStatus() *LightStatus {
	if x != nil {
		return x.LightStatus
	}
	return nil
}

// MESSAGE_GET_DCT20_LIGHT_INFORMATION_CMD
type GetDctInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDctInformationRequest) Reset() {
	*x = GetDctInformationRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDctInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDctInformationRequest) ProtoMessage() {}

func (x *GetDctInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDctInformationRequest.ProtoReflect.Descriptor instead.
func (*GetDctInformationRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{22}
}

type GetDctInformationResponse struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	LightsInformation []*LightDeviceInformation `protobuf:"bytes,1,rep,name=lights_information,json=lightsInformation,proto3" json:"lights_information,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetDctInformationResponse) Reset() {
	*x = GetDctInformationResponse{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDctInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDctInformationResponse) ProtoMessage() {}

func (x *GetDctInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDctInformationResponse.ProtoReflect.Descriptor instead.
func (*GetDctInformationResponse) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{23}
}

func (x *GetDctInformationResponse) GetLightsInformation() []*LightDeviceInformation {
	if x != nil {
		return x.LightsInformation
	}
	return nil
}

type GetLightInformationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LightAddress  int32                  `protobuf:"varint,1,opt,name=light_address,json=lightAddress,proto3" json:"light_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLightInformationRequest) Reset() {
	*x = GetLightInformationRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLightInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLightInformationRequest) ProtoMessage() {}

func (x *GetLightInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLightInformationRequest.ProtoReflect.Descriptor instead.
func (*GetLightInformationRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{24}
}

func (x *GetLightInformationRequest) GetLightAddress() int32 {
	if x != nil {
		return x.LightAddress
	}
	return 0
}

type GetLightInformationResponse struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	LightInformation *LightDeviceInformation `protobuf:"bytes,1,opt,name=light_information,json=lightInformation,proto3" json:"light_information,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetLightInformationResponse) Reset() {
	*x = GetLightInformationResponse{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLightInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLightInformationResponse) ProtoMessage() {}

func (x *GetLightInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLightInformationResponse.ProtoReflect.Descriptor instead.
func (*GetLightInformationResponse) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{25}
}

func (x *GetLightInformationResponse) GetLightInformation() *LightDeviceInformation {
	if x != nil {
		return x.LightInformation
	}
	return nil
}

// MESSAGE_REMOVE_LIGHT_CMD
type RemoveLightRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LightAddress  int32                  `protobuf:"varint,1,opt,name=light_address,json=lightAddress,proto3" json:"light_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveLightRequest) Reset() {
	*x = RemoveLightRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveLightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLightRequest) ProtoMessage() {}

func (x *RemoveLightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLightRequest.ProtoReflect.Descriptor instead.
func (*RemoveLightRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{26}
}

func (x *RemoveLightRequest) GetLightAddress() int32 {
	if x != nil {
		return x.LightAddress
	}
	return 0
}

type SwapLightAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressA      int32                  `protobuf:"varint,1,opt,name=address_a,json=addressA,proto3" json:"address_a,omitempty"`
	AddressB      int32                  `protobuf:"varint,2,opt,name=address_b,json=addressB,proto3" json:"address_b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapLightAddressesRequest) Reset() {
	*x = SwapLightAddressesRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapLightAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapLightAddressesRequest) ProtoMessage() {}

func (x *SwapLightAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapLightAddressesRequest.ProtoReflect.Descriptor instead.
func (*SwapLightAddressesRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{27}
}

func (x *SwapLightAddressesRequest) GetAddressA() int32 {
	if x != nil {
		return x.AddressA
	}
	return 0
}

func (x *SwapLightAddressesRequest) GetAddressB() int32 {
	if x != nil {
		return x.AddressB
	}
	return 0
}

// Configuration
type SetDctConfigurationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          DctMode                `protobuf:"varint,1,opt,name=mode,proto3,enum=icl.DctMode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDctConfigurationRequest) Reset() {
	*x = SetDctConfigurationRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDctConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDctConfigurationRequest) ProtoMessage() {}

func (x *SetDctConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDctConfigurationRequest.ProtoReflect.Descriptor instead.
func (*SetDctConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{28}
}

func (x *SetDctConfigurationRequest) GetMode() DctMode {
	if x != nil {
		return x.Mode
	}
	return DctMode_DCT_MODE_UKNOWN
}

type GetDctConfigurationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDctConfigurationRequest) Reset() {
	*x = GetDctConfigurationRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDctConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDctConfigurationRequest) ProtoMessage() {}

func (x *GetDctConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDctConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetDctConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{29}
}

type GetDctConfigurationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          DctMode                `protobuf:"varint,1,opt,name=mode,proto3,enum=icl.DctMode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDctConfigurationResponse) Reset() {
	*x = GetDctConfigurationResponse{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDctConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDctConfigurationResponse) ProtoMessage() {}

func (x *GetDctConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDctConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetDctConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{30}
}

func (x *GetDctConfigurationResponse) GetMode() DctMode {
	if x != nil {
		return x.Mode
	}
	return DctMode_DCT_MODE_UKNOWN
}

type SetLightMaxBrightnessRequest struct {
	state               protoimpl.MessageState                                 `protogen:"open.v1"`
	LightsMaxBrightness []*SetLightMaxBrightnessRequest_LightMaximumBrightness `protobuf:"bytes,1,rep,name=lights_max_brightness,json=lightsMaxBrightness,proto3" json:"lights_max_brightness,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SetLightMaxBrightnessRequest) Reset() {
	*x = SetLightMaxBrightnessRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLightMaxBrightnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLightMaxBrightnessRequest) ProtoMessage() {}

func (x *SetLightMaxBrightnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLightMaxBrightnessRequest.ProtoReflect.Descriptor instead.
func (*SetLightMaxBrightnessRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{31}
}

func (x *SetLightMaxBrightnessRequest) GetLightsMaxBrightness() []*SetLightMaxBrightnessRequest_LightMaximumBrightness {
	if x != nil {
		return x.LightsMaxBrightness
	}
	return nil
}

// **************************************************************
// ** InfiniteWaterColorDCT Info Payloads ***
// **************************************************************
type LightAddedInfoPayload struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	LightInformation *LightDeviceInformation `protobuf:"bytes,1,opt,name=light_information,json=lightInformation,proto3" json:"light_information,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LightAddedInfoPayload) Reset() {
	*x = LightAddedInfoPayload{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightAddedInfoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightAddedInfoPayload) ProtoMessage() {}

func (x *LightAddedInfoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightAddedInfoPayload.ProtoReflect.Descriptor instead.
func (*LightAddedInfoPayload) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{32}
}

func (x *LightAddedInfoPayload) GetLightInformation() *LightDeviceInformation {
	if x != nil {
		return x.LightInformation
	}
	return nil
}

type DctStatusChangedInfoPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DctStatus     *DctStatus             `protobuf:"bytes,1,opt,name=dct_status,json=dctStatus,proto3" json:"dct_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DctStatusChangedInfoPayload) Reset() {
	*x = DctStatusChangedInfoPayload{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DctStatusChangedInfoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DctStatusChangedInfoPayload) ProtoMessage() {}

func (x *DctStatusChangedInfoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DctStatusChangedInfoPayload.ProtoReflect.Descriptor instead.
func (*DctStatusChangedInfoPayload) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{33}
}

func (x *DctStatusChangedInfoPayload) GetDctStatus() *DctStatus {
	if x != nil {
		return x.DctStatus
	}
	return nil
}

type LightErrorDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     LightErrorCode         `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=icl.LightErrorCode" json:"error_code,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightErrorDetails) Reset() {
	*x = LightErrorDetails{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightErrorDetails) ProtoMessage() {}

func (x *LightErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightErrorDetails.ProtoReflect.Descriptor instead.
func (*LightErrorDetails) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{34}
}

func (x *LightErrorDetails) GetErrorCode() LightErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return LightErrorCode_UNKNOWN_ERROR
}

func (x *LightErrorDetails) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type LightErrors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LightAddress  int32                  `protobuf:"varint,1,opt,name=light_address,json=lightAddress,proto3" json:"light_address,omitempty"`
	LightErrors   []*LightErrorDetails   `protobuf:"bytes,2,rep,name=light_errors,json=lightErrors,proto3" json:"light_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightErrors) Reset() {
	*x = LightErrors{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightErrors) ProtoMessage() {}

func (x *LightErrors) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightErrors.ProtoReflect.Descriptor instead.
func (*LightErrors) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{35}
}

func (x *LightErrors) GetLightAddress() int32 {
	if x != nil {
		return x.LightAddress
	}
	return 0
}

func (x *LightErrors) GetLightErrors() []*LightErrorDetails {
	if x != nil {
		return x.LightErrors
	}
	return nil
}

// a device Error message - Sent throught GetActiveErrorsRequest or as an event on mqtt
// MQTT topic: 'async/<category>/<serial number>/error'
type ActiveErrors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LightsErrors  []*LightErrors         `protobuf:"bytes,1,rep,name=lights_errors,json=lightsErrors,proto3" json:"lights_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActiveErrors) Reset() {
	*x = ActiveErrors{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveErrors) ProtoMessage() {}

func (x *ActiveErrors) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveErrors.ProtoReflect.Descriptor instead.
func (*ActiveErrors) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{36}
}

func (x *ActiveErrors) GetLightsErrors() []*LightErrors {
	if x != nil {
		return x.LightsErrors
	}
	return nil
}

type GetActiveErrorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveErrorsRequest) Reset() {
	*x = GetActiveErrorsRequest{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveErrorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveErrorsRequest) ProtoMessage() {}

func (x *GetActiveErrorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveErrorsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveErrorsRequest) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{37}
}

type GetActiveErrorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActiveErrors  *ActiveErrors          `protobuf:"bytes,1,opt,name=active_errors,json=activeErrors,proto3" json:"active_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveErrorsResponse) Reset() {
	*x = GetActiveErrorsResponse{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveErrorsResponse) ProtoMessage() {}

func (x *GetActiveErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveErrorsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveErrorsResponse) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{38}
}

func (x *GetActiveErrorsResponse) GetActiveErrors() *ActiveErrors {
	if x != nil {
		return x.ActiveErrors
	}
	return nil
}

type LightConfigurationPatch_Field struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to FieldType:
	//
	//	*LightConfigurationPatch_Field_ControlType
	//	*LightConfigurationPatch_Field_Brightness
	//	*LightConfigurationPatch_Field_DriveMode
	FieldType     isLightConfigurationPatch_Field_FieldType `protobuf_oneof:"field_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightConfigurationPatch_Field) Reset() {
	*x = LightConfigurationPatch_Field{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightConfigurationPatch_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightConfigurationPatch_Field) ProtoMessage() {}

func (x *LightConfigurationPatch_Field) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightConfigurationPatch_Field.ProtoReflect.Descriptor instead.
func (*LightConfigurationPatch_Field) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{17, 0}
}

func (x *LightConfigurationPatch_Field) GetFieldType() isLightConfigurationPatch_Field_FieldType {
	if x != nil {
		return x.FieldType
	}
	return nil
}

func (x *LightConfigurationPatch_Field) GetControlType() LightControlType {
	if x != nil {
		if x, ok := x.FieldType.(*LightConfigurationPatch_Field_ControlType); ok {
			return x.ControlType
		}
	}
	return LightControlType_LIGHT_CONTROL_UKNOWN
}

func (x *LightConfigurationPatch_Field) GetBrightness() int32 {
	if x != nil {
		if x, ok := x.FieldType.(*LightConfigurationPatch_Field_Brightness); ok {
			return x.Brightness
		}
	}
	return 0
}

func (x *LightConfigurationPatch_Field) GetDriveMode() *LightDriveMode {
	if x != nil {
		if x, ok := x.FieldType.(*LightConfigurationPatch_Field_DriveMode); ok {
			return x.DriveMode
		}
	}
	return nil
}

type isLightConfigurationPatch_Field_FieldType interface {
	isLightConfigurationPatch_Field_FieldType()
}

type LightConfigurationPatch_Field_ControlType struct {
	ControlType LightControlType `protobuf:"varint,1,opt,name=control_type,json=controlType,proto3,enum=icl.LightControlType,oneof"`
}

type LightConfigurationPatch_Field_Brightness struct {
	Brightness int32 `protobuf:"varint,2,opt,name=brightness,proto3,oneof"`
}

type LightConfigurationPatch_Field_DriveMode struct {
	DriveMode *LightDriveMode `protobuf:"bytes,3,opt,name=drive_mode,json=driveMode,proto3,oneof"`
}

func (*LightConfigurationPatch_Field_ControlType) isLightConfigurationPatch_Field_FieldType() {}

func (*LightConfigurationPatch_Field_Brightness) isLightConfigurationPatch_Field_FieldType() {}

func (*LightConfigurationPatch_Field_DriveMode) isLightConfigurationPatch_Field_FieldType() {}

type SetLightMaxBrightnessRequest_LightMaximumBrightness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       int32                  `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	MaxBrightness int32                  `protobuf:"varint,2,opt,name=max_brightness,json=maxBrightness,proto3" json:"max_brightness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLightMaxBrightnessRequest_LightMaximumBrightness) Reset() {
	*x = SetLightMaxBrightnessRequest_LightMaximumBrightness{}
	mi := &file_digitalControllerTransformer_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLightMaxBrightnessRequest_LightMaximumBrightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLightMaxBrightnessRequest_LightMaximumBrightness) ProtoMessage() {}

func (x *SetLightMaxBrightnessRequest_LightMaximumBrightness) ProtoReflect() protoreflect.Message {
	mi := &file_digitalControllerTransformer_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLightMaxBrightnessRequest_LightMaximumBrightness.ProtoReflect.Descriptor instead.
func (*SetLightMaxBrightnessRequest_LightMaximumBrightness) Descriptor() ([]byte, []int) {
	return file_digitalControllerTransformer_proto_rawDescGZIP(), []int{31, 0}
}

func (x *SetLightMaxBrightnessRequest_LightMaximumBrightness) GetAddress() int32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *SetLightMaxBrightnessRequest_LightMaximumBrightness) GetMaxBrightness() int32 {
	if x != nil {
		return x.MaxBrightness
	}
	return 0
}

var File_digitalControllerTransformer_proto protoreflect.FileDescriptor

const file_digitalControllerTransformer_proto_rawDesc = "" +
	"\n" +
	"\"digitalControllerTransformer.proto\x12\x03icl\x1a\x1acommonClientMessages.proto\"\x95\a\n" +
	"\vDCTRequests\x12M\n" +
	"\x10set_dct20_lights\x18\x01 \x01(\v2!.icl.SetLightConfigurationRequestH\x00R\x0esetDct20Lights\x12D\n" +
	"\x10get_dct20_status\x18\x02 \x01(\v2\x18.icl.GetDctStatusRequestH\x00R\x0egetDct20Status\x12Q\n" +
	"\x16get_dct20_light_status\x18\x03 \x01(\v2\x1a.icl.GetLightStatusRequestH\x00R\x13getDct20LightStatus\x12g\n" +
	" get_dct20_all_lights_information\x18\x04 \x01(\v2\x1d.icl.GetDctInformationRequestH\x00R\x1cgetDct20AllLightsInformation\x12`\n" +
	"\x1bget_dct20_light_information\x18\x05 \x01(\v2\x1f.icl.GetLightInformationRequestH\x00R\x18getDct20LightInformation\x12<\n" +
	"\fremove_light\x18\x06 \x01(\v2\x17.icl.RemoveLightRequestH\x00R\vremoveLight\x12N\n" +
	"\x11set_configuration\x18\a \x01(\v2\x1f.icl.SetDctConfigurationRequestH\x00R\x10setConfiguration\x12N\n" +
	"\x11get_configuration\x18\b \x01(\v2\x1f.icl.GetDctConfigurationRequestH\x00R\x10getConfiguration\x12Q\n" +
	"\x12set_max_brightness\x18\t \x01(\v2!.icl.SetLightMaxBrightnessRequestH\x00R\x10setMaxBrightness\x12G\n" +
	"\x0eswap_addresses\x18\n" +
	" \x01(\v2\x1e.icl.SwapLightAddressesRequestH\x00R\rswapAddresses\x12I\n" +
	"\x11get_active_errors\x18\v \x01(\v2\x1b.icl.GetActiveErrorsRequestH\x00R\x0fgetActiveErrorsB\x0e\n" +
	"\frequest_type\"\xbd\x04\n" +
	"%InfiniteWaterColorDCTResponsePayloads\x12E\n" +
	"\x10get_dct20_status\x18\x01 \x01(\v2\x19.icl.GetDctStatusResponseH\x00R\x0egetDct20Status\x12R\n" +
	"\x16get_dct20_light_status\x18\x02 \x01(\v2\x1b.icl.GetLightStatusResponseH\x00R\x13getDct20LightStatus\x12h\n" +
	" get_dct20_all_lights_information\x18\x03 \x01(\v2\x1e.icl.GetDctInformationResponseH\x00R\x1cgetDct20AllLightsInformation\x12a\n" +
	"\x1bget_dct20_light_information\x18\x04 \x01(\v2 .icl.GetLightInformationResponseH\x00R\x18getDct20LightInformation\x12O\n" +
	"\x11get_configuration\x18\x05 \x01(\v2 .icl.GetDctConfigurationResponseH\x00R\x10getConfiguration\x12J\n" +
	"\x11get_active_errors\x18\x06 \x01(\v2\x1c.icl.GetActiveErrorsResponseH\x00R\x0fgetActiveErrorsB\x0f\n" +
	"\rresponse_type\"\xc5\x01\n" +
	"!InfiniteWaterColorDCTInfoPayloads\x12=\n" +
	"\vlight_added\x18\x01 \x01(\v2\x1a.icl.LightAddedInfoPayloadH\x00R\n" +
	"lightAdded\x12P\n" +
	"\x12dct_status_changed\x18\x02 \x01(\v2 .icl.DctStatusChangedInfoPayloadH\x00R\x10dctStatusChangedB\x0f\n" +
	"\rannounce_type\"\xa1\x01\n" +
	"\x15CommandRequestMessage\x12!\n" +
	"\fcommand_uuid\x18\x01 \x01(\tR\vcommandUuid\x124\n" +
	"\x06common\x18\x02 \x01(\v2\x1a.ned.CommonRequestPayloadsH\x00R\x06common\x12$\n" +
	"\x03icl\x18\x03 \x01(\v2\x10.icl.DCTRequestsH\x00R\x03iclB\t\n" +
	"\apayload\"\xf5\x01\n" +
	"\x16CommandResponseMessage\x12!\n" +
	"\fcommand_uuid\x18\x01 \x01(\tR\vcommandUuid\x126\n" +
	"\rresponse_code\x18\x02 \x01(\x0e2\x11.ned.ResponseCodeR\fresponseCode\x125\n" +
	"\x06common\x18\x03 \x01(\v2\x1b.ned.CommonResponsePayloadsH\x00R\x06common\x12>\n" +
	"\x03icl\x18\x04 \x01(\v2*.icl.InfiniteWaterColorDCTResponsePayloadsH\x00R\x03iclB\t\n" +
	"\apayload\"O\n" +
	"\vInfoMessage\x12@\n" +
	"\apayload\x18\x01 \x01(\v2&.icl.InfiniteWaterColorDCTInfoPayloadsR\apayload\"\xa0\x02\n" +
	"\x10TelemetryMessage\x12\x14\n" +
	"\x05power\x18\x01 \x01(\x05R\x05power\x12\x18\n" +
	"\acurrent\x18\x02 \x01(\x05R\acurrent\x12\x18\n" +
	"\avoltage\x18\x03 \x01(\x01R\avoltage\x12+\n" +
	"\x11board_temperature\x18\x04 \x01(\x05R\x10boardTemperature\x12>\n" +
	"\x10lights_telemetry\x18\x05 \x03(\v2\x13.icl.LightTelemetryR\x0flightsTelemetry\x12\x12\n" +
	"\x04rssi\x18\x06 \x01(\x05R\x04rssi\x12A\n" +
	"\x1ddct_power_derating_percentage\x18\a \x01(\x05R\x1adctPowerDeratingPercentage\"\x93\x01\n" +
	"\x0eLightTelemetry\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\x05R\aaddress\x12+\n" +
	"\x11light_temperature\x18\x02 \x01(\x05R\x10lightTemperature\x12:\n" +
	"\x19light_derating_percentage\x18\x03 \x01(\x05R\x17lightDeratingPercentage\"4\n" +
	"\x0fLightJandyDrive\x12!\n" +
	"\ftarget_color\x18\x01 \x01(\x05R\vtargetColor\"b\n" +
	"\x0eLightRgbwDrive\x12\x10\n" +
	"\x03red\x18\x01 \x01(\x05R\x03red\x12\x14\n" +
	"\x05green\x18\x02 \x01(\x05R\x05green\x12\x12\n" +
	"\x04blue\x18\x03 \x01(\x05R\x04blue\x12\x14\n" +
	"\x05white\x18\x04 \x01(\x05R\x05white\"\xa2\x01\n" +
	"\x0eLightShowDrive\x124\n" +
	"\x16slide_duration_seconds\x18\x01 \x01(\x05R\x14slideDurationSeconds\x12-\n" +
	"\x12transition_percent\x18\x02 \x01(\x05R\x11transitionPercent\x12+\n" +
	"\x06colors\x18\x03 \x03(\v2\x13.icl.LightRgbwDriveR\x06colors\"\xc9\x01\n" +
	"\x0eLightDriveMode\x127\n" +
	"\vjandy_drive\x18\x01 \x01(\v2\x14.icl.LightJandyDriveH\x00R\n" +
	"jandyDrive\x124\n" +
	"\n" +
	"rgbw_drive\x18\x02 \x01(\v2\x13.icl.LightRgbwDriveH\x00R\trgbwDrive\x124\n" +
	"\n" +
	"show_drive\x18\x03 \x01(\v2\x13.icl.LightShowDriveH\x00R\tshowDriveB\x12\n" +
	"\x10light_drive_mode\"t\n" +
	"\tDctStatus\x120\n" +
	"\x14dct_wattage_capacity\x18\x01 \x01(\x05R\x12dctWattageCapacity\x125\n" +
	"\rlights_status\x18\x02 \x03(\v2\x10.icl.LightStatusR\flightsStatus\"\xff\x01\n" +
	"\vLightStatus\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\x05R\aaddress\x128\n" +
	"\fcontrol_type\x18\x02 \x01(\x0e2\x15.icl.LightControlTypeR\vcontrolType\x12\x1e\n" +
	"\n" +
	"brightness\x18\x03 \x01(\x05R\n" +
	"brightness\x12%\n" +
	"\x0emax_brightness\x18\x04 \x01(\x05R\rmaxBrightness\x122\n" +
	"\n" +
	"drive_mode\x18\x06 \x01(\v2\x13.icl.LightDriveModeR\tdriveMode\x12!\n" +
	"\fis_available\x18\a \x01(\bR\visAvailable\"\x98\x01\n" +
	"\x16LightDeviceInformation\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\x05R\aaddress\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12)\n" +
	"\x10firmware_version\x18\x03 \x01(\tR\x0ffirmwareVersion\x12#\n" +
	"\rserial_number\x18\x04 \x01(\tR\fserialNumber\"\xe0\x01\n" +
	"\x12LightConfiguration\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\x05R\aaddress\x128\n" +
	"\fcontrol_type\x18\x02 \x01(\x0e2\x15.icl.LightControlTypeR\vcontrolType\x12\x1e\n" +
	"\n" +
	"brightness\x18\x03 \x01(\x05R\n" +
	"brightness\x122\n" +
	"\n" +
	"drive_mode\x18\x04 \x01(\v2\x13.icl.LightDriveModeR\tdriveMode\x12\"\n" +
	"\rtime_to_start\x18\x05 \x01(\x03R\vtimeToStart\"]\n" +
	"\x1cSetLightConfigurationRequest\x12=\n" +
	"\vlight_patch\x18\x01 \x03(\v2\x1c.icl.LightConfigurationPatchR\n" +
	"lightPatch\"\xbf\x02\n" +
	"\x17LightConfigurationPatch\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\x05R\aaddress\x12:\n" +
	"\x06fields\x18\x02 \x03(\v2\".icl.LightConfigurationPatch.FieldR\x06fields\x12\"\n" +
	"\rtime_to_start\x18\x03 \x01(\x03R\vtimeToStart\x1a\xa9\x01\n" +
	"\x05Field\x12:\n" +
	"\fcontrol_type\x18\x01 \x01(\x0e2\x15.icl.LightControlTypeH\x00R\vcontrolType\x12 \n" +
	"\n" +
	"brightness\x18\x02 \x01(\x05H\x00R\n" +
	"brightness\x124\n" +
	"\n" +
	"drive_mode\x18\x03 \x01(\v2\x13.icl.LightDriveModeH\x00R\tdriveModeB\f\n" +
	"\n" +
	"field_type\"\x15\n" +
	"\x13GetDctStatusRequest\"E\n" +
	"\x14GetDctStatusResponse\x12-\n" +
	"\n" +
	"dct_status\x18\x01 \x01(\v2\x0e.icl.DctStatusR\tdctStatus\"<\n" +
	"\x15GetLightStatusRequest\x12#\n" +
	"\rlight_address\x18\x01 \x01(\x05R\flightAddress\"M\n" +
	"\x16GetLightStatusResponse\x123\n" +
	"\flight_status\x18\x01 \x01(\v2\x10.icl.LightStatusR\vlightStatus\"\x1a\n" +
	"\x18GetDctInformationRequest\"g\n" +
	"\x19GetDctInformationResponse\x12J\n" +
	"\x12lights_information\x18\x01 \x03(\v2\x1b.icl.LightDeviceInformationR\x11lightsInformation\"A\n" +
	"\x1aGetLightInformationRequest\x12#\n" +
	"\rlight_address\x18\x01 \x01(\x05R\flightAddress\"g\n" +
	"\x1bGetLightInformationResponse\x12H\n" +
	"\x11light_information\x18\x01 \x01(\v2\x1b.icl.LightDeviceInformationR\x10lightInformation\"9\n" +
	"\x12RemoveLightRequest\x12#\n" +
	"\rlight_address\x18\x01 \x01(\x05R\flightAddress\"U\n" +
	"\x19SwapLightAddressesRequest\x12\x1b\n" +
	"\taddress_a\x18\x01 \x01(\x05R\baddressA\x12\x1b\n" +
	"\taddress_b\x18\x02 \x01(\x05R\baddressB\">\n" +
	"\x1aSetDctConfigurationRequest\x12 \n" +
	"\x04mode\x18\x01 \x01(\x0e2\f.icl.DctModeR\x04mode\"\x1c\n" +
	"\x1aGetDctConfigurationRequest\"?\n" +
	"\x1bGetDctConfigurationResponse\x12 \n" +
	"\x04mode\x18\x01 \x01(\x0e2\f.icl.DctModeR\x04mode\"\xe7\x01\n" +
	"\x1cSetLightMaxBrightnessRequest\x12l\n" +
	"\x15lights_max_brightness\x18\x01 \x03(\v28.icl.SetLightMaxBrightnessRequest.LightMaximumBrightnessR\x13lightsMaxBrightness\x1aY\n" +
	"\x16LightMaximumBrightness\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\x05R\aaddress\x12%\n" +
	"\x0emax_brightness\x18\x02 \x01(\x05R\rmaxBrightness\"a\n" +
	"\x15LightAddedInfoPayload\x12H\n" +
	"\x11light_information\x18\x01 \x01(\v2\x1b.icl.LightDeviceInformationR\x10lightInformation\"L\n" +
	"\x1bDctStatusChangedInfoPayload\x12-\n" +
	"\n" +
	"dct_status\x18\x01 \x01(\v2\x0e.icl.DctStatusR\tdctStatus\"l\n" +
	"\x11LightErrorDetails\x122\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x0e2\x13.icl.LightErrorCodeR\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"m\n" +
	"\vLightErrors\x12#\n" +
	"\rlight_address\x18\x01 \x01(\x05R\flightAddress\x129\n" +
	"\flight_errors\x18\x02 \x03(\v2\x16.icl.LightErrorDetailsR\vlightErrors\"E\n" +
	"\fActiveErrors\x125\n" +
	"\rlights_errors\x18\x01 \x03(\v2\x10.icl.LightErrorsR\flightsErrors\"\x18\n" +
	"\x16GetActiveErrorsRequest\"Q\n" +
	"\x17GetActiveErrorsResponse\x126\n" +
	"\ractive_errors\x18\x01 \x01(\v2\x11.icl.ActiveErrorsR\factiveErrors*u\n" +
	"\x10LightControlType\x12\x18\n" +
	"\x14LIGHT_CONTROL_UKNOWN\x10\x00\x12\x14\n" +
	"\x10LIGHT_CONTROL_ON\x10\x01\x12\x15\n" +
	"\x11LIGHT_CONTROL_OFF\x10\x02\x12\x1a\n" +
	"\x16LIGHT_CONTROL_BLINKING\x10\x03*N\n" +
	"\aDctMode\x12\x13\n" +
	"\x0fDCT_MODE_UKNOWN\x10\x00\x12\x19\n" +
	"\x15DCT_MODE_INSTALLATION\x10\x01\x12\x13\n" +
	"\x0fDCT_MODE_NORMAL\x10\x02*?\n" +
	"\x0eLightErrorCode\x12\x11\n" +
	"\rUNKNOWN_ERROR\x10\x00\x12\x1a\n" +
	"\x16HIGH_TEMPERATURE_ERROR\x10\x01B\x1aZ\x18pooltester3_20250916/nedb\x06proto3"

var (
	file_digitalControllerTransformer_proto_rawDescOnce sync.Once
	file_digitalControllerTransformer_proto_rawDescData []byte
)

func file_digitalControllerTransformer_proto_rawDescGZIP() []byte {
	file_digitalControllerTransformer_proto_rawDescOnce.Do(func() {
		file_digitalControllerTransformer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_digitalControllerTransformer_proto_rawDesc), len(file_digitalControllerTransformer_proto_rawDesc)))
	})
	return file_digitalControllerTransformer_proto_rawDescData
}

var file_digitalControllerTransformer_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_digitalControllerTransformer_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_digitalControllerTransformer_proto_goTypes = []any{
	(LightControlType)(0), // 0: icl.LightControlType
	(DctMode)(0),          // 1: icl.DctMode
	(LightErrorCode)(0),   // 2: icl.LightErrorCode
	(*DCTRequests)(nil),   // 3: icl.DCTRequests
	(*InfiniteWaterColorDCTResponsePayloads)(nil),               // 4: icl.InfiniteWaterColorDCTResponsePayloads
	(*InfiniteWaterColorDCTInfoPayloads)(nil),                   // 5: icl.InfiniteWaterColorDCTInfoPayloads
	(*CommandRequestMessage)(nil),                               // 6: icl.CommandRequestMessage
	(*CommandResponseMessage)(nil),                              // 7: icl.CommandResponseMessage
	(*InfoMessage)(nil),                                         // 8: icl.InfoMessage
	(*TelemetryMessage)(nil),                                    // 9: icl.TelemetryMessage
	(*LightTelemetry)(nil),                                      // 10: icl.LightTelemetry
	(*LightJandyDrive)(nil),                                     // 11: icl.LightJandyDrive
	(*LightRgbwDrive)(nil),                                      // 12: icl.LightRgbwDrive
	(*LightShowDrive)(nil),                                      // 13: icl.LightShowDrive
	(*LightDriveMode)(nil),                                      // 14: icl.LightDriveMode
	(*DctStatus)(nil),                                           // 15: icl.DctStatus
	(*LightStatus)(nil),                                         // 16: icl.LightStatus
	(*LightDeviceInformation)(nil),                              // 17: icl.LightDeviceInformation
	(*LightConfiguration)(nil),                                  // 18: icl.LightConfiguration
	(*SetLightConfigurationRequest)(nil),                        // 19: icl.SetLightConfigurationRequest
	(*LightConfigurationPatch)(nil),                             // 20: icl.LightConfigurationPatch
	(*GetDctStatusRequest)(nil),                                 // 21: icl.GetDctStatusRequest
	(*GetDctStatusResponse)(nil),                                // 22: icl.GetDctStatusResponse
	(*GetLightStatusRequest)(nil),                               // 23: icl.GetLightStatusRequest
	(*GetLightStatusResponse)(nil),                              // 24: icl.GetLightStatusResponse
	(*GetDctInformationRequest)(nil),                            // 25: icl.GetDctInformationRequest
	(*GetDctInformationResponse)(nil),                           // 26: icl.GetDctInformationResponse
	(*GetLightInformationRequest)(nil),                          // 27: icl.GetLightInformationRequest
	(*GetLightInformationResponse)(nil),                         // 28: icl.GetLightInformationResponse
	(*RemoveLightRequest)(nil),                                  // 29: icl.RemoveLightRequest
	(*SwapLightAddressesRequest)(nil),                           // 30: icl.SwapLightAddressesRequest
	(*SetDctConfigurationRequest)(nil),                          // 31: icl.SetDctConfigurationRequest
	(*GetDctConfigurationRequest)(nil),                          // 32: icl.GetDctConfigurationRequest
	(*GetDctConfigurationResponse)(nil),                         // 33: icl.GetDctConfigurationResponse
	(*SetLightMaxBrightnessRequest)(nil),                        // 34: icl.SetLightMaxBrightnessRequest
	(*LightAddedInfoPayload)(nil),                               // 35: icl.LightAddedInfoPayload
	(*DctStatusChangedInfoPayload)(nil),                         // 36: icl.DctStatusChangedInfoPayload
	(*LightErrorDetails)(nil),                                   // 37: icl.LightErrorDetails
	(*LightErrors)(nil),                                         // 38: icl.LightErrors
	(*ActiveErrors)(nil),                                        // 39: icl.ActiveErrors
	(*GetActiveErrorsRequest)(nil),                              // 40: icl.GetActiveErrorsRequest
	(*GetActiveErrorsResponse)(nil),                             // 41: icl.GetActiveErrorsResponse
	(*LightConfigurationPatch_Field)(nil),                       // 42: icl.LightConfigurationPatch.Field
	(*SetLightMaxBrightnessRequest_LightMaximumBrightness)(nil), // 43: icl.SetLightMaxBrightnessRequest.LightMaximumBrightness
	(*CommonRequestPayloads)(nil),                               // 44: ned.CommonRequestPayloads
	(ResponseCode)(0),                                           // 45: ned.ResponseCode
	(*CommonResponsePayloads)(nil),                              // 46: ned.CommonResponsePayloads
}
var file_digitalControllerTransformer_proto_depIdxs = []int32{
	19, // 0: icl.DCTRequests.set_dct20_lights:type_name -> icl.SetLightConfigurationRequest
	21, // 1: icl.DCTRequests.get_dct20_status:type_name -> icl.GetDctStatusRequest
	23, // 2: icl.DCTRequests.get_dct20_light_status:type_name -> icl.GetLightStatusRequest
	25, // 3: icl.DCTRequests.get_dct20_all_lights_information:type_name -> icl.GetDctInformationRequest
	27, // 4: icl.DCTRequests.get_dct20_light_information:type_name -> icl.GetLightInformationRequest
	29, // 5: icl.DCTRequests.remove_light:type_name -> icl.RemoveLightRequest
	31, // 6: icl.DCTRequests.set_configuration:type_name -> icl.SetDctConfigurationRequest
	32, // 7: icl.DCTRequests.get_configuration:type_name -> icl.GetDctConfigurationRequest
	34, // 8: icl.DCTRequests.set_max_brightness:type_name -> icl.SetLightMaxBrightnessRequest
	30, // 9: icl.DCTRequests.swap_addresses:type_name -> icl.SwapLightAddressesRequest
	40, // 10: icl.DCTRequests.get_active_errors:type_name -> icl.GetActiveErrorsRequest
	22, // 11: icl.InfiniteWaterColorDCTResponsePayloads.get_dct20_status:type_name -> icl.GetDctStatusResponse
	24, // 12: icl.InfiniteWaterColorDCTResponsePayloads.get_dct20_light_status:type_name -> icl.GetLightStatusResponse
	26, // 13: icl.InfiniteWaterColorDCTResponsePayloads.get_dct20_all_lights_information:type_name -> icl.GetDctInformationResponse
	28, // 14: icl.InfiniteWaterColorDCTResponsePayloads.get_dct20_light_information:type_name -> icl.GetLightInformationResponse
	33, // 15: icl.InfiniteWaterColorDCTResponsePayloads.get_configuration:type_name -> icl.GetDctConfigurationResponse
	41, // 16: icl.InfiniteWaterColorDCTResponsePayloads.get_active_errors:type_name -> icl.GetActiveErrorsResponse
	35, // 17: icl.InfiniteWaterColorDCTInfoPayloads.light_added:type_name -> icl.LightAddedInfoPayload
	36, // 18: icl.InfiniteWaterColorDCTInfoPayloads.dct_status_changed:type_name -> icl.DctStatusChangedInfoPayload
	44, // 19: icl.CommandRequestMessage.common:type_name -> ned.CommonRequestPayloads
	3,  // 20: icl.CommandRequestMessage.icl:type_name -> icl.DCTRequests
	45, // 21: icl.CommandResponseMessage.response_code:type_name -> ned.ResponseCode
	46, // 22: icl.CommandResponseMessage.common:type_name -> ned.CommonResponsePayloads
	4,  // 23: icl.CommandResponseMessage.icl:type_name -> icl.InfiniteWaterColorDCTResponsePayloads
	5,  // 24: icl.InfoMessage.payload:type_name -> icl.InfiniteWaterColorDCTInfoPayloads
	10, // 25: icl.TelemetryMessage.lights_telemetry:type_name -> icl.LightTelemetry
	12, // 26: icl.LightShowDrive.colors:type_name -> icl.LightRgbwDrive
	11, // 27: icl.LightDriveMode.jandy_drive:type_name -> icl.LightJandyDrive
	12, // 28: icl.LightDriveMode.rgbw_drive:type_name -> icl.LightRgbwDrive
	13, // 29: icl.LightDriveMode.show_drive:type_name -> icl.LightShowDrive
	16, // 30: icl.DctStatus.lights_status:type_name -> icl.LightStatus
	0,  // 31: icl.LightStatus.control_type:type_name -> icl.LightControlType
	14, // 32: icl.LightStatus.drive_mode:type_name -> icl.LightDriveMode
	0,  // 33: icl.LightConfiguration.control_type:type_name -> icl.LightControlType
	14, // 34: icl.LightConfiguration.drive_mode:type_name -> icl.LightDriveMode
	20, // 35: icl.SetLightConfigurationRequest.light_patch:type_name -> icl.LightConfigurationPatch
	42, // 36: icl.LightConfigurationPatch.fields:type_name -> icl.LightConfigurationPatch.Field
	15, // 37: icl.GetDctStatusResponse.dct_status:type_name -> icl.DctStatus
	16, // 38: icl.GetLightStatusResponse.light_status:type_name -> icl.LightStatus
	17, // 39: icl.GetDctInformationResponse.lights_information:type_name -> icl.LightDeviceInformation
	17, // 40: icl.GetLightInformationResponse.light_information:type_name -> icl.LightDeviceInformation
	1,  // 41: icl.SetDctConfigurationRequest.mode:type_name -> icl.DctMode
	1,  // 42: icl.GetDctConfigurationResponse.mode:type_name -> icl.DctMode
	43, // 43: icl.SetLightMaxBrightnessRequest.lights_max_brightness:type_name -> icl.SetLightMaxBrightnessRequest.LightMaximumBrightness
	17, // 44: icl.LightAddedInfoPayload.light_information:type_name -> icl.LightDeviceInformation
	15, // 45: icl.DctStatusChangedInfoPayload.dct_status:type_name -> icl.DctStatus
	2,  // 46: icl.LightErrorDetails.error_code:type_name -> icl.LightErrorCode
	37, // 47: icl.LightErrors.light_errors:type_name -> icl.LightErrorDetails
	38, // 48: icl.ActiveErrors.lights_errors:type_name -> icl.LightErrors
	39, // 49: icl.GetActiveErrorsResponse.active_errors:type_name -> icl.ActiveErrors
	0,  // 50: icl.LightConfigurationPatch.Field.control_type:type_name -> icl.LightControlType
	14, // 51: icl.LightConfigurationPatch.Field.drive_mode:type_name -> icl.LightDriveMode
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_digitalControllerTransformer_proto_init() }
func file_digitalControllerTransformer_proto_init() {
	if File_digitalControllerTransformer_proto != nil {
		return
	}
	file_commonClientMessages_proto_init()
	file_digitalControllerTransformer_proto_msgTypes[0].OneofWrappers = []any{
		(*DCTRequests_SetDct20Lights)(nil),
		(*DCTRequests_GetDct20Status)(nil),
		(*DCTRequests_GetDct20LightStatus)(nil),
		(*DCTRequests_GetDct20AllLightsInformation)(nil),
		(*DCTRequests_GetDct20LightInformation)(nil),
		(*DCTRequests_RemoveLight)(nil),
		(*DCTRequests_SetConfiguration)(nil),
		(*DCTRequests_GetConfiguration)(nil),
		(*DCTRequests_SetMaxBrightness)(nil),
		(*DCTRequests_SwapAddresses)(nil),
		(*DCTRequests_GetActiveErrors)(nil),
	}
	file_digitalControllerTransformer_proto_msgTypes[1].OneofWrappers = []any{
		(*InfiniteWaterColorDCTResponsePayloads_GetDct20Status)(nil),
		(*InfiniteWaterColorDCTResponsePayloads_GetDct20LightStatus)(nil),
		(*InfiniteWaterColorDCTResponsePayloads_GetDct20AllLightsInformation)(nil),
		(*InfiniteWaterColorDCTResponsePayloads_GetDct20LightInformation)(nil),
		(*InfiniteWaterColorDCTResponsePayloads_GetConfiguration)(nil),
		(*InfiniteWaterColorDCTResponsePayloads_GetActiveErrors)(nil),
	}
	file_digitalControllerTransformer_proto_msgTypes[2].OneofWrappers = []any{
		(*InfiniteWaterColorDCTInfoPayloads_LightAdded)(nil),
		(*InfiniteWaterColorDCTInfoPayloads_DctStatusChanged)(nil),
	}
	file_digitalControllerTransformer_proto_msgTypes[3].OneofWrappers = []any{
		(*CommandRequestMessage_Common)(nil),
		(*CommandRequestMessage_Icl)(nil),
	}
	file_digitalControllerTransformer_proto_msgTypes[4].OneofWrappers = []any{
		(*CommandResponseMessage_Common)(nil),
		(*CommandResponseMessage_Icl)(nil),
	}
	file_digitalControllerTransformer_proto_msgTypes[11].OneofWrappers = []any{
		(*LightDriveMode_JandyDrive)(nil),
		(*LightDriveMode_RgbwDrive)(nil),
		(*LightDriveMode_ShowDrive)(nil),
	}
	file_digitalControllerTransformer_proto_msgTypes[39].OneofWrappers = []any{
		(*LightConfigurationPatch_Field_ControlType)(nil),
		(*LightConfigurationPatch_Field_Brightness)(nil),
		(*LightConfigurationPatch_Field_DriveMode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_digitalControllerTransformer_proto_rawDesc), len(file_digitalControllerTransformer_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_digitalControllerTransformer_proto_goTypes,
		DependencyIndexes: file_digitalControllerTransformer_proto_depIdxs,
		EnumInfos:         file_digitalControllerTransformer_proto_enumTypes,
		MessageInfos:      file_digitalControllerTransformer_proto_msgTypes,
	}.Build()
	File_digitalControllerTransformer_proto = out.File
	file_digitalControllerTransformer_proto_goTypes = nil
	file_digitalControllerTransformer_proto_depIdxs = nil
}
