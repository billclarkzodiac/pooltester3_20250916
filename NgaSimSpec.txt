The project name is NgaSim - original document date  2025-09-10.  bc.
update 20250918 - using Pi, using external poller, connecting protobuf,
  using old .py scripts as examples, to decode Announce and Telemetry, plus 
  Salt status responses.

This is a list of attributes that this tester's Go code "NgaSim" should have.

NgaSim is software to simulate the behavior of an NGA pool automation.
NgaSim is intended not to completely replace an NGA for the purpose of controlling a pool 
but to stimulate and therefore test the connected devices normally found with an NGA.

Currently only devices that operate via MQTT over WiFi and or SLIP can be tested.

The Pi linux has a SLIP driver enabled as 'sl0',  MQTT and TCP know how to 
communicate over SLIP at port 169.254.1.1:1883

Supported devices must use a protocol we called "gen2", which runs over SLIP. 
The gen2 protocol uses Protobuf to send and receive structured packets of data 
containing commands and status.
MQTT and SLIP uses TCP to encapsulate the protobuf packets.

Devices: 
    Sanitizer   - locally called "Salty" or "The Salt" that creates chlorine,
    VSP         - a Jandy brand Variable Speed Pump called "VSP",
    Heater      - based on a Jandy JXI that uses gas for heat,
    TruSense    - a pH and ORP sensor pair, was called JOP in prototype phase,
    Heatpump    - a heater/chiller combo based on Jandy JE
    ICL         - an Infinite Color Light controller.

Of the devices listed only the Sanitizer and ICL have their protobuf structures defined.

< IMPORTANT STEP >
For reference only I'm attaching a python script that actually sends and 
receives protobuf packets over MQTT. This script also knows how to display announce messages 
and others like telemetry etc. Use this script to see how to send commands and display responses.

I will also "add context" by attaching all the protobuf pb.go programs.
< / IMPORTANT STEP >

<IMPORTANT>
The NgaSim when running on the Raspberry Pi launches a program call "poller", to run type:-
sudo ./poller
or use a Go routine to run poller.
</IMPORTANT>

<ignore>
don't use a Go version of poller until the topology state machine is better understood.
NgaSim is being ported to an x86 Linux laptop, its not required to use the 
Raspberry Pi  poller utility since Claude has convinced me ! that the topology
message can be done with Go alone.

I'm attaching an analysis of the poller utility. "poller_howto.md"
</ignore>

Topology messages are intended only for devices on SLIP over the RS485 shared
serial bus.

A topology message helps devices determine when they are allowed to talk.

The NgaSim must accept all messages including Announce, Telemetry, Responses including status.

Display:
NgaSim commands and responses are made visible using "web UI" at localhost:8080

NgaSim will scan for devices Announce messages to determine their serial numbers.

NgaSim can have a demo mode that fakes devices to show, here is a device list:
VSP, Heater, HeatPump, ICL, TruSense, Sanitizer("Salt"), ORION.

Normal NgaSim mode is to only display devices recognized by topology and
Announce messages.  A device seen by topology message without a serial number or
device type should be listed as UNKNOWN at IP #.#.#.#

The top level display is good for the overall status, 
ie. the home page, ie. the html index page.

This index page should allow displayed devices to be selectable so that the 
device's extended details are shown, details like serial number, 
device name, type, telemetry, status indicators, command buttons and details.

If a device that was discovered by its announce message becomes un-responsive,
or a NOT READY status is seen then gray the device's display and indicate "OFF LINE".
As soon as a device's READY status is received the display should become color again
with an "ON LINE" status.

When a device is selected from the index page the devices extended details are shown
AND also device specific command buttons and dials or sliders are made available.

Command 'buttons' (widgets) should send a request packet via protobuf or just change 
a mode locally.

A device found by Announce message of a type we don't have code to interpret it's
capabilities BUT we do have protobuf definition for it, then we can use reflection 
to extract from the protobuf structure members how to display possible commands
from the protobuf requests and status from protobuf responses. The requests 
should have editable boxes along with the protobuf member name.
Some responses will just need a single bit displayed as check box with True or 
False,  Some responses will be integers displayed as decimal in boxes.

Device Specific Displays when selected from the index:
VSP - Serial number (from announce message)
    - number ? of max number of VSP found
    - Status: mode, Stopped OK, Stopped ERROR, Ramping up to speed (can take upto 30 seconds), At speed and ok, error!
            : RPM returned via a telemetry message, or fake RPM taken from SDEM, or Priming mode.
            : Temperature, from telemetry, Celsius, no decimal places.
            : Power (Watts), from telemetry, no decimal places.
            : time since last run to determine if RPM needs to be set at priming speed (2500)
    - Command: STOP  set SDEM to 0 RPM.
             : SDEM set demand, setting RPM, (limit to 600..3450) default 3450,
             : GO   turn on pump at speed set by SDEM or priming speed.
Note:  SDEM+GO commands MUST be sent as a pair so that a GO cmd is never
  sent without the device knowing the speed.
  The same command can have the GO bit cleared and is still valid,
  except the pump will not run.
Note2: If an SDEM+GO command is sent after a STOP command, or unknown/idle status
  then put pump in 'PRIMING' mode at 2500 RPM for duration of up to 3 minutes, 
  duration should be settable from  0..180 seconds. (set by a dial)
            : find me (flash external LED)


Sanitizer (Salty / The Salt)
 - Serial number (from announce message)
 - number ? of max number found
 - Status:(from it's telemetry message)
   : power level set to (0..101 %) Interpret 101% as "BOOST", level<=10% = "LOW"
   : power on ?
   : Salinity (also, an indicator of is Salinity value valid yet)
   : Cell Temperature
   : Cell Voltage
   : Cell Current
   : Cell current direction (ie reverse ?)
   : time till next reversal
   : cell total power on time (minute resolution)
   : PIB Heatsink Temperature (PIB = power interface board)
 - Command: set power level (0..101) Note: 101 special case = BOOST Mode (dial)
   : duration of BOOST mode, hours+minutes. default 24 hours (dial)
   : read serial number PIB  (button) read by default asap
   : read serial number Cell (button) read by default asap
   : find me.  (flash external LED) (button)


ICL (LED color lights)
  - Serial number (from announce message) (also used for a logging key)
  - Status: current RGBW level (each color LED can be set to 0..255) or fake if demo mode.
            Show an approximation of actual RGBW light expected (light bulb), starting at power up, update often.
          : Temperature deg. C (dial with color heat index)
  - Command: set RGBW levels, 0,0,0,0 == OFF (slider)
           : find me. (button), flashes LED on controller, also flashes all lights controlled. Duration settable by Telemetry configuration.

ORION (another type of sanitation controller, I don't know how it works)
  - Serial number

ORION and other new devices we don't have full details of, but may have
pb.go definitions available to use Go Reflection to extract the protobuf
member's type to then construct a command (button,dial,slider...), 
also for status since we know the type, reflection can tell us how to format
and display the number/string... etc.

Attaching an old working python script that used reflection and also knew how to
display the Announce, Telemetry and other status information that I would like
integrated into NgaSim.

This version of NgaSim should send protobuf requests to MQTT via SLIP, and 
expect responses also via MQTT over SLIP.

thank you.

