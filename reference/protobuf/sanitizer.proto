/***************************************************************
Protobuf Message Sanitizer proto file 
- command/response definition
****************************************************************/
syntax = "proto3";
option go_package = "pooltester3_20250916/ned";

import "commonClientMessages.proto";

package sanitizer;


/************************************************************
*** Sanitizer Messages ***
************************************************************/
message SanitizerRequestPayloads{
    oneof request_type {
        SetSanitizerTargetPercentageRequestPayload set_sanitizer_output_percentage = 1;
        GetSanitizerDeviceInformationRequestPayload get_device_information = 2;
        GetSanitizerStatusRequestPayload get_status = 3;
        GetSanitizerConfigurationRequestPayload get_configuration = 4;
        SetSanitizerConfigurationRequestPayload set_configuration = 5;
        OverrideFlowSensorTypeRequestPayload override_flow_sensor_type = 6;
        GetSanitizerActiveErrorsRequestPayload get_active_errors = 7;
    }
}

message SanitizerResponsePayloads {
    oneof response_type {
        GetSanitizerDeviceInformationResponsePayload get_device_information = 1;
        GetSanitizerStatusResponsePayload get_status = 2;
        GetSanitizerConfigurationResponsePayload get_configuration = 3;
        GetSanitizerActiveErrorsResponsePayload get_active_errors = 4;
    }
}

message SanitizerInfoPayloads { // Placeholder
    oneof announce_type {
        SanitizerStatus status = 1;
        SanitizerConfiguration configuration = 2;
    }
}

/************************************************************
*** Sanitizer Wrappers ***
************************************************************/
// a command wrapper message with a type field
// MQTT topic: 'cmd/<category>/<serial number>/req'
// Was Use ned.CommandRequestMessage and ned.CommandResponseMessage from commonClientMessages.proto
// 20251015bc

message CommandRequestMessage {
    string command_uuid = 1;

    oneof payload {
        ned.CommonRequestPayloads common = 2;
        SanitizerRequestPayloads sanitizer = 3;
    }
}

// a response wrapper message with a message type field
// and the required response code
// MQTT topic: 'cmd/<category>/<serial number>/res'
message CommandResponseMessage {
    string command_uuid = 1;

    //required
    ned.ResponseCode response_code = 2;

    oneof payload {
        ned.CommonResponsePayloads common = 3;
        SanitizerResponsePayloads sanitizer = 4;
    }
}

// an Info message wrapper
// MQTT  topic: 'async/<category>/<serial number>/info'
// Info messages can be a variety of message types
message InfoMessage {
    SanitizerInfoPayloads payload = 1;
}

// a Telemetry message wrapper
// MQTT topic: 'async/<category>/<serial number>/dt'
// Telemetry messages do not need a message 'type'
message TelemetryMessage {
    int32 rssi = 1;
    int32 ppm_salt = 2;
    int32 percentage_output = 3;
    int32 accelerometer_x = 4;
    int32 accelerometer_y = 5;
    int32 accelerometer_z = 6;
    int32 line_input_voltage = 7;
    bool is_cell_flow_reversed = 8;
}

/***************************************************************
*** Sanitizer Common structures ***
****************************************************************/
enum CellType {
    CELL_TYPE_UNKNOWN = 0;
    SMART_CELL = 1;
    SIMPLE_CELL = 2;
}

enum FlowSensorType {
    SENSOR_TYPE_UNKNOWN = 0;
    GAS = 1;
    SWITCH = 2;
}

message SanitizerStatus {
    int32 target_percentage = 1;
    FlowSensorType flow_sensor_type = 2;
}

message SanitizerConfiguration {
    int32 cell_reversal_duration = 1;
}

/***************************************************************
*** Sanitizer Messages Payloads ***
****************************************************************/

//Command and Response
//MESSAGE_SET_SANITIZER_OUTPUT_PERCENT_CMD
message SetSanitizerTargetPercentageRequestPayload {
    int32 target_percentage = 1;
}

//MESSAGE_GET_DEVICE_INFORMATION_RSP
message GetSanitizerDeviceInformationRequestPayload {}
message GetSanitizerDeviceInformationResponsePayload {
    string cell_serial_number = 1;
    string cell_firmware_version = 2;
    CellType cell_type = 3;
}

//MESSAGE_GET_STATUS_RSP
message GetSanitizerStatusRequestPayload {}
message GetSanitizerStatusResponsePayload {
    SanitizerStatus status = 1;
}


//Configuration
message GetSanitizerConfigurationRequestPayload {}
message GetSanitizerConfigurationResponsePayload {
    SanitizerConfiguration configuration = 1;
}

message SetSanitizerConfigurationRequestPayload {
    SanitizerConfiguration configuration = 1;
}

// Override flow sensor type
message OverrideFlowSensorTypeRequestPayload {
    FlowSensorType flow_sensor_type = 1;
}

/************************************************************
*** Sanitizer Errors ***
************************************************************/

message GetSanitizerActiveErrorsRequestPayload {}
message GetSanitizerActiveErrorsResponsePayload {
    ActiveErrors active_errors = 1;
}

// a device Error message 
// MQTT topic: 'async/<category>/<serial number>/error'
message DeviceErrorMessage {
    ActiveErrors active_errors = 1;
}

enum SanitizerErrorCode {
    UNKNOWN_ERROR = 0;
    SANITIZER_ERROR_NO_FLOW = 1;
    SANITIZER_ERROR_LOW_SALT= 2;
    SANITIZER_ERROR_HIGH_SALT = 3;
    SANITIZER_ERROR_CELL_TILTED = 4;
}

message SanitizerError {
    SanitizerErrorCode error_code = 1;
    string error_message = 2;
}

message ActiveErrors {
    // List of active errors (empty if back to normal)
    repeated SanitizerError error_list = 1;
}
